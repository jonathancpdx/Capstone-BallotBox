# Set defaults
NETWORK_LOGS        ?= no
FS_LOGS             ?= yes
FS_TYPE             ?= FAT
PEEK_POKE_SERVER    ?= no
USE_RTC_CLOCK       ?= yes
VOTING_SYSTEM_DEBUG ?= no
USE_CLI_TASK        ?= no
AXI_DEBUG_PRINT     ?= no
NETWORK_LOG_DEBUG   ?= no
DISABLE_NETWORK     ?= yes

# Voting System Definitions
include Makefile.common

export OS_DIR  = $(SOURCE_DIR)/os/freertos

# MCU name
export MCU = atmega328p

# Output format. (can be srec, ihex, binary)
export FORMAT = ihex

# Optimization level, can be [0, 1, 2, 3, s]. 0 turns off optimization.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = s

USE_LED_BLINK_TASK ?= 0

export CC		= avr-gcc
export CPP		= avr-gcc
export GCC		= avr-gcc
export OBJCOPY 	= avr-objcopy
export OBJDUMP 	= avr-objdump
export SIZE 	= avr-size
export COMPILER_FLAGS = -mcmodel=medany #not sure if needed
# TODO: Use -Werror only for GCC now
export WERROR = -Werror

export SOURCE_BASE_DIR = $(SOURCE_DIR)
export INCLUDE_BASE_DIR = $(SOURCE_DIR)/include
export FREERTOS_BASE_DIR = $(SOURCE_DIR)/FreeRTOSv10.3.1
export FREERTOS_DEMO_DIR = $(FREERTOS_BASE_DIR)/FreeRTOS/Demo/ATMega328p
# export OS_INCLUDE_DIR = $(INCLUDE_BASE_DIR)/os/freertos
export FREERTOS_SOURCE_DIR = $(FREERTOS_BASE_DIR)/FreeRTOS/Source

export SBB_SOURCE_DIR = $(SOURCE_BASE_DIR)/sbb
export LOG_SOURCE_DIR = $(SOURCE_BASE_DIR)/logging
export CRYPTO_SOURCE_DIR = $(SOURCE_BASE_DIR)/crypto
export SBB_INCLUDE_DIR = $(INCLUDE_BASE_DIR)/sbb
export LOG_INCLUDE_DIR = $(INCLUDE_BASE_DIR)/logging
export CRYPTO_INCLUDE_DIR = $(INCLUDE_BASE_DIR)/crypto

WARNINGS = $(WERROR) -Wall -Wextra -Wshadow -Wpointer-arith -Wcast-align -Wsign-compare \
		   -Waggregate-return -Wmissing-declarations -Wunused

C_WARNINGS = -Wbad-function-cast -Wmissing-prototypes -Wstrict-prototypes

export FREERTOS_SRC = \
	$(FREERTOS_SOURCE_DIR)/croutine.c \
	$(FREERTOS_SOURCE_DIR)/list.c \
	$(FREERTOS_SOURCE_DIR)/queue.c \
	$(FREERTOS_SOURCE_DIR)/tasks.c \
	$(FREERTOS_SOURCE_DIR)/timers.c \
	$(FREERTOS_SOURCE_DIR)/event_groups.c \
	$(FREERTOS_SOURCE_DIR)/stream_buffer.c \
	$(FREERTOS_SOURCE_DIR)/portable/MemMang/heap_1.c

export APP_SOURCE_DIR	= $(FREERTOS_DEMO_DIR)/../Common/Minimal

export PORT_SRC = $(FREERTOS_SOURCE_DIR)/portable/GCC/ATMega328p/port.c

export INCLUDES = \
	-I.  \
	-I$(FREERTOS_SOURCE_DIR)/include \
	-I$(FREERTOS_SOURCE_DIR)/../Common/include \
	-I$(FREERTOS_SOURCE_DIR)/portable/GCC/ATMega323 \
	-I$(FREERTOS_SOURCE_DIR)/include \
	-I$(FREERTOS_DEMO_DIR)/../Common/include \
	-I$(FREERTOS_SOURCE_DIR)/portable/GCC/ATMega328p\
	-I$(FREERTOS_DEMO_DIR)/demo \
	-I$(FREERTOS_DEMO_DIR)/devices \
	-I$(INCLUDE_DIR)\
	-I$(OS_INCLUDE_DIR) \
	-I$(SBB_INCLUDE_DIR) \
	-I$(LOG_INCLUDE_DIR) \
	-I$(CRYPTO_INCLUDE_DIR) 

export ARFLAGS=crsv

#
# Combine all necessary flags and optional flags.
# Add target processor to flags.
export CFLAGS += -D GCC_MEGA_AVR  \
	-std=gnu99 \
	-O$(OPT) -mmcu=$(MCU) \
	$(WARNINGS) \
	$(C_WARNINGS) \
	$(INCLUDES)

export ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp 

# Disable warnings for C++ for now
# need to review and replace export CPPFLAGS += -O0 -g3 $(ARCH) $(ABI) $(COMPILER_FLAGS) $(INCLUDES)

export LDFLAGS	 = -T $(FREERTOS_DEMO_DIR)/link.ld -nostartfiles -nostdlib #$(ARCH) $(ABI)
export LIBS	 =	-lc -lgcc

OS_SRC = $(OS_DIR)/time.c \
		 $(OS_DIR)/debug_io.c \
		 $(OS_DIR)/sbb_tcp.c \
		 $(OS_DIR)/fetch_key.c \
		 main_freertos.c

ifeq ($(NETWORK_LOGS),yes)
	export OS_SRC += $(OS_DIR)/log_net_osd.c
endif

ifeq ($(FS_LOGS),yes)
	ifeq ($(FS_TYPE),FAT)
	export OS_SRC += $(OS_DIR)/log_fs_fat.c
	export INCLUDES += -I$(FREERTOS_DEMO_DIR)/SD/src
	export CFLAGS += -DUSE_RTC_CLOCK=$(USE_RTC_CLOCK) -DTARGET_FS_FAT=1
	export CPPFLAGS += -DUSE_RTC_CLOCK=$(USE_RTC_CLOCK)
	export CPP_SRC += $(FREERTOS_DEMO_DIR)/SD/src/SD.cpp \
		$(FREERTOS_DEMO_DIR)/SD/src/File.cpp \
		$(FREERTOS_DEMO_DIR)/SD/src/utility/Sd2Card.cpp \
		$(FREERTOS_DEMO_DIR)/SD/src/utility/SdFile.cpp \
		$(FREERTOS_DEMO_DIR)/SD/src/utility/SdVolume.cpp \
		$(FREERTOS_DEMO_DIR)/SD/src/SDLib.cpp
	else
	ifeq ($(FS_TYPE),BLACK_SESAME)
	export OS_SRC += $(OS_DIR)/log_fs_black_sesame.c
	export CFLAGS += -DUSE_RTC_CLOCK=$(USE_RTC_CLOCK) -DTARGET_FS_BLACK_SESAME=1
else
	$(error unknown FS_TYPE: $(FS_TYPE))
endif
endif
endif

DEMO_SRC = $(OS_SRC) $(CRYPTO_SRC) $(LOGGING_SRC) $(SBB_SRC)

$(info PEEK_POKE_SERVER=$(PEEK_POKE_SERVER))

ifeq ($(PEEK_POKE_SERVER),yes)
	$(info Pulling in peek-poke server)
	FREERTOS_SRC += $(FREERTOS_PEEKPOKE_SRC)
endif

ifeq ($(VOTING_SYSTEM_DEBUG),yes)
	CFLAGS += -DVOTING_SYSTEM_DEBUG=1
endif

ifeq ($(USE_CLI_TASK),yes)
	CFLAGS += -DUSE_CLI_TASK=1
endif

ifeq ($(USE_CLI_TASK),yes)
	CFLAGS += -DUSE_CLI_TASK=1
endif

ifeq ($(AXI_DEBUG_PRINT),yes)
	CFLAGS += -DAXI_DEBUG_PRINT=1
endif

ifeq ($(NETWORK_LOG_DEBUG),yes)
	CFLAGS += -DNETWORK_LOG_DEBUG=1
endif

ifeq ($(DISABLE_NETWORK),yes)
	CFLAGS += -DDISABLE_NETWORK=1
endif

CFLAGS += \
		  -I$(FREERTOS_PROTOCOLS_DIR)/include

DEFAULT_PROG ?= default_ballot_box
BOX1_PROG ?= ballot_box_1
BOX2_PROG ?= ballot_box_2
BOX3_PROG ?= ballot_box_3
BOX4_PROG ?= ballot_box_4

DEFAULT_SRC = \
			  $(OS_DIR)/sbb_config_default.c \
			  $(CRYPTO_DIR)/crypto_config_default.c

# there is almost certainly a better way of doing this, but
# this will work for now
#
# note that the "sbb_config_box*" files contain both crypto and
# TCP/naming configurations; the crypto default configuration in
# the crypto directory exists solely to allow crypto tests to be
# run on their own
BOX1_SRC = $(OS_DIR)/sbb_config_box1.c
BOX2_SRC = $(OS_DIR)/sbb_config_box2.c
BOX3_SRC = $(OS_DIR)/sbb_config_box3.c
BOX4_SRC = $(OS_DIR)/sbb_config_box4.c

# Define all object files.
RTOS_OBJ = $(FREERTOS_SRC:.c=.o)
RTOS_TCP_OBJ = $(FREERTOS_TCP_SRC:.c=.o)
PORT_OBJ = $(PORT_SRC:.c=.o)
DEMO_OBJ = $(DEMO_SRC:.c=.o)
CPP_OBJ = $(CPP_SRC:.cpp=.o)
	OBJS = $(RTOS_OBJ) #$(RTOS_TCP_OBJ) $(DEMO_OBJ) $(CPP_OBJ)
	#OBJS = $(PORT_ASM_OBJ) $(PORT_OBJ) $(RTOS_OBJ) $(RTOS_TCP_OBJ) $(DEMO_OBJ) $(CPP_OBJ)
	OBJS_DEFAULT = $(OBJS) $(DEFAULT_SRC:.c=.o)
	OBJS_BOX1 = $(OBJS) $(BOX1_SRC:.c=.o)
	OBJS_BOX2 = $(OBJS) $(BOX2_SRC:.c=.o)
	OBJS_BOX3 = $(OBJS) $(BOX3_SRC:.c=.o)
	OBJS_BOX4 = $(OBJS) $(BOX4_SRC:.c=.o)

$(info ASFLAGS=$(ASFLAGS))
$(info CFLAGS=$(CFLAGS))
$(info ARFLAGS=$(ARFLAGS))
$(info CC=$(CC))
$(info GCC=$(GCC))

# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	@echo
	$(CC) $(CFLAGS) $(OBJ) --output $@ $(LDFLAGS)

# Compile: create object files from C source files.
%.o : %.c
	@echo "	   CC $<"
	@$(CC) $(ASFLAGS) -c $(CFLAGS) -o $@ $<

%.o: %.cpp
	@echo "    C++ $<"
	@$(CPP) $(ASFLAGS) -c $(CPPFLAGS) -o $@ $<

# Compile: create assembler files from C source files.
%.s : %.c
	$(CC) $(ASFLAGS) -S $(CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
%.o : %.S
	@echo "	   CC $<"
	@$(CC) $(ASFLAGS) -c -o $@ $<

default: $(DEFAULT_PROG).elf

all: $(DEFAULT_PROG).elf #$(BOX1_PROG).elf $(BOX2_PROG).elf $(BOX3_PROG).elf $(BOX4_PROG).elf

crypto: $(CRYPTO_SRC:.c=.o)

logging: $(LOGGING_SRC:.c=.o)

sbb: default

$(DEFAULT_PROG).elf	 : $(OBJS_DEFAULT)
	@echo Linking....
	@$(GCC) -o $@ $(OBJS_DEFAULT) $(LIBS)
	@$(OBJDUMP) -S $(DEFAULT_PROG).elf > $(DEFAULT_PROG).asm
	@echo Completed $@

$(BOX1_PROG).elf  : $(OBJS_BOX1)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX1) $(LIBS)
	@$(OBJDUMP) -S $(BOX1_PROG).elf > $(BOX1_PROG).asm
	@echo Completed $@

$(BOX2_PROG).elf  : $(OBJS_BOX2)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX2) $(LIBS)
	@$(OBJDUMP) -S $(BOX2_PROG).elf > $(BOX2_PROG).asm
	@echo Completed $@

$(BOX3_PROG).elf  : $(OBJS_BOX3)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX3) $(LIBS)
	@$(OBJDUMP) -S $(BOX3_PROG).elf > $(BOX3_PROG).asm
	@echo Completed $@

$(BOX4_PROG).elf  : $(OBJS_BOX4)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX4) $(LIBS)
	@$(OBJDUMP) -S $(BOX4_PROG).elf > $(BOX4_PROG).asm
	@echo Completed $@

clean_crypto :
	@rm -f $(CRYPTO_SRC:.c=.o)

clean_logging :
	@rm -f $(LOGGING_SRC:.c=.o)

clean_sbb :
	@rm -f $(SBB_SRC:.c=.o)

clean :
	@rm -f $(OBJS_DEFAULT) $(OBJS_BOX1) $(OBJS_BOX2) $(OBJS_BOX3) $(OBJS_BOX4)
	@rm -f $(DEFAULT_PROG).elf $(BOX1_PROG).elf $(BOX2_PROG).elf $(BOX3_PROG).elf $(BOX4_PROG).elf
	@rm -f $(DEFAULT_PROG).map $(BOX1_PROG).map $(BOX2_PROG).map $(BOX3_PROG).map $(BOX4_PROG).map
	@rm -f $(DEFAULT_PROG).asm $(BOX1_PROG).asm $(BOX2_PROG).asm $(BOX3_PROG).asm $(BOX4_PROG).asm
