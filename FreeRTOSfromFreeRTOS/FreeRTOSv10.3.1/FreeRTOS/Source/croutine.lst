   1               		.file	"croutine.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 184               	.global	xCoRoutineCreate
 186               	xCoRoutineCreate:
 187               		.stabd	46,0,0
   1:../../Source/croutine.c **** /*
   2:../../Source/croutine.c ****  * FreeRTOS Kernel V10.3.1
   3:../../Source/croutine.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../Source/croutine.c ****  *
   5:../../Source/croutine.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../Source/croutine.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../Source/croutine.c ****  * the Software without restriction, including without limitation the rights to
   8:../../Source/croutine.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../Source/croutine.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../Source/croutine.c ****  * subject to the following conditions:
  11:../../Source/croutine.c ****  *
  12:../../Source/croutine.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../Source/croutine.c ****  * copies or substantial portions of the Software.
  14:../../Source/croutine.c ****  *
  15:../../Source/croutine.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../Source/croutine.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../Source/croutine.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../Source/croutine.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../Source/croutine.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../Source/croutine.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../Source/croutine.c ****  *
  22:../../Source/croutine.c ****  * http://www.FreeRTOS.org
  23:../../Source/croutine.c ****  * http://aws.amazon.com/freertos
  24:../../Source/croutine.c ****  *
  25:../../Source/croutine.c ****  * 1 tab == 4 spaces!
  26:../../Source/croutine.c ****  */
  27:../../Source/croutine.c **** 
  28:../../Source/croutine.c **** #include "FreeRTOS.h"
  29:../../Source/croutine.c **** #include "task.h"
  30:../../Source/croutine.c **** #include "croutine.h"
  31:../../Source/croutine.c **** 
  32:../../Source/croutine.c **** /* Remove the whole file is co-routines are not being used. */
  33:../../Source/croutine.c **** #if( configUSE_CO_ROUTINES != 0 )
  34:../../Source/croutine.c **** 
  35:../../Source/croutine.c **** /*
  36:../../Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  37:../../Source/croutine.c ****  * than file scope.
  38:../../Source/croutine.c ****  */
  39:../../Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  40:../../Source/croutine.c **** 	#define static
  41:../../Source/croutine.c **** #endif
  42:../../Source/croutine.c **** 
  43:../../Source/croutine.c **** 
  44:../../Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  45:../../Source/croutine.c **** static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-ro
  46:../../Source/croutine.c **** static List_t xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  47:../../Source/croutine.c **** static List_t xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for
  48:../../Source/croutine.c **** static List_t * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently
  49:../../Source/croutine.c **** static List_t * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list cur
  50:../../Source/croutine.c **** static List_t xPendingReadyCoRoutineList;								/*< Holds co-routines that have been readied by an
  51:../../Source/croutine.c **** 
  52:../../Source/croutine.c **** /* Other file private variables. --------------------------------*/
  53:../../Source/croutine.c **** CRCB_t * pxCurrentCoRoutine = NULL;
  54:../../Source/croutine.c **** static UBaseType_t uxTopCoRoutineReadyPriority = 0;
  55:../../Source/croutine.c **** static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  56:../../Source/croutine.c **** 
  57:../../Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  58:../../Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  59:../../Source/croutine.c **** 
  60:../../Source/croutine.c **** /*
  61:../../Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  62:../../Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  63:../../Source/croutine.c ****  *
  64:../../Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  65:../../Source/croutine.c ****  * used from within an ISR.
  66:../../Source/croutine.c ****  */
  67:../../Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  68:../../Source/croutine.c **** {																													\
  69:../../Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  70:../../Source/croutine.c **** 	{																												\
  71:../../Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  72:../../Source/croutine.c **** 	}																												\
  73:../../Source/croutine.c **** 	vListInsertEnd( ( List_t * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGeneric
  74:../../Source/croutine.c **** }
  75:../../Source/croutine.c **** 
  76:../../Source/croutine.c **** /*
  77:../../Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
  78:../../Source/croutine.c ****  * automatically upon the creation of the first co-routine.
  79:../../Source/croutine.c ****  */
  80:../../Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
  81:../../Source/croutine.c **** 
  82:../../Source/croutine.c **** /*
  83:../../Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
  84:../../Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
  85:../../Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
  86:../../Source/croutine.c ****  * list by the co-routine scheduler.
  87:../../Source/croutine.c ****  */
  88:../../Source/croutine.c **** static void prvCheckPendingReadyList( void );
  89:../../Source/croutine.c **** 
  90:../../Source/croutine.c **** /*
  91:../../Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
  92:../../Source/croutine.c ****  * see if any require waking.
  93:../../Source/croutine.c ****  *
  94:../../Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
  95:../../Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
  96:../../Source/croutine.c ****  * we need not look any further down the list.
  97:../../Source/croutine.c ****  */
  98:../../Source/croutine.c **** static void prvCheckDelayedList( void );
  99:../../Source/croutine.c **** 
 100:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 101:../../Source/croutine.c **** 
 102:../../Source/croutine.c **** BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t 
 103:../../Source/croutine.c **** {
 189               	.LM0:
 190               	.LFBB1:
 191 0000 CF92      		push r12
 192 0002 DF92      		push r13
 193 0004 EF92      		push r14
 194 0006 FF92      		push r15
 195 0008 1F93      		push r17
 196 000a CF93      		push r28
 197 000c DF93      		push r29
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 7 */
 201               	.L__stack_usage = 7
 202 000e 6C01      		movw r12,r24
 203 0010 162F      		mov r17,r22
 204 0012 F42E      		mov r15,r20
 104:../../Source/croutine.c **** BaseType_t xReturn;
 105:../../Source/croutine.c **** CRCB_t *pxCoRoutine;
 106:../../Source/croutine.c **** 
 107:../../Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 108:../../Source/croutine.c **** 	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
 206               	.LM1:
 207 0014 8AE1      		ldi r24,lo8(26)
 208 0016 90E0      		ldi r25,0
 209 0018 0E94 0000 		call pvPortMalloc
 210 001c EC01      		movw r28,r24
 109:../../Source/croutine.c **** 	if( pxCoRoutine )
 212               	.LM2:
 213 001e 892B      		or r24,r25
 214 0020 01F4      		brne .+2
 215 0022 00C0      		rjmp .L6
 110:../../Source/croutine.c **** 	{
 111:../../Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 112:../../Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 113:../../Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 217               	.LM3:
 218 0024 8091 0000 		lds r24,pxCurrentCoRoutine
 219 0028 9091 0000 		lds r25,pxCurrentCoRoutine+1
 220 002c 892B      		or r24,r25
 221 002e 01F4      		brne .L3
 114:../../Source/croutine.c **** 		{
 115:../../Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 223               	.LM4:
 224 0030 D093 0000 		sts pxCurrentCoRoutine+1,r29
 225 0034 C093 0000 		sts pxCurrentCoRoutine,r28
 226               	.LBB4:
 227               	.LBB5:
 116:../../Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 117:../../Source/croutine.c **** 		}
 118:../../Source/croutine.c **** 
 119:../../Source/croutine.c **** 		/* Check the priority is within limits. */
 120:../../Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 121:../../Source/croutine.c **** 		{
 122:../../Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 123:../../Source/croutine.c **** 		}
 124:../../Source/croutine.c **** 
 125:../../Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 126:../../Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 127:../../Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 128:../../Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 129:../../Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 130:../../Source/croutine.c **** 
 131:../../Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 132:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 133:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 134:../../Source/croutine.c **** 
 135:../../Source/croutine.c **** 		/* Set the co-routine control block as a link back from the ListItem_t.
 136:../../Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 137:../../Source/croutine.c **** 		in a list. */
 138:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 139:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 140:../../Source/croutine.c **** 
 141:../../Source/croutine.c **** 		/* Event lists are always in priority order. */
 142:../../Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_
 143:../../Source/croutine.c **** 
 144:../../Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 145:../../Source/croutine.c **** 		list at the correct priority. */
 146:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 147:../../Source/croutine.c **** 
 148:../../Source/croutine.c **** 		xReturn = pdPASS;
 149:../../Source/croutine.c **** 	}
 150:../../Source/croutine.c **** 	else
 151:../../Source/croutine.c **** 	{
 152:../../Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 153:../../Source/croutine.c **** 	}
 154:../../Source/croutine.c **** 
 155:../../Source/croutine.c **** 	return xReturn;
 156:../../Source/croutine.c **** }
 157:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 158:../../Source/croutine.c **** 
 159:../../Source/croutine.c **** void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
 160:../../Source/croutine.c **** {
 161:../../Source/croutine.c **** TickType_t xTimeToWake;
 162:../../Source/croutine.c **** 
 163:../../Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 164:../../Source/croutine.c **** 	not a problem. */
 165:../../Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 166:../../Source/croutine.c **** 
 167:../../Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 168:../../Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 169:../../Source/croutine.c **** 	both lists. */
 170:../../Source/croutine.c **** 	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 171:../../Source/croutine.c **** 
 172:../../Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 173:../../Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 174:../../Source/croutine.c **** 
 175:../../Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 176:../../Source/croutine.c **** 	{
 177:../../Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 178:../../Source/croutine.c **** 		overflow list. */
 179:../../Source/croutine.c **** 		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine-
 180:../../Source/croutine.c **** 	}
 181:../../Source/croutine.c **** 	else
 182:../../Source/croutine.c **** 	{
 183:../../Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 184:../../Source/croutine.c **** 		current block list. */
 185:../../Source/croutine.c **** 		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGeneri
 186:../../Source/croutine.c **** 	}
 187:../../Source/croutine.c **** 
 188:../../Source/croutine.c **** 	if( pxEventList )
 189:../../Source/croutine.c **** 	{
 190:../../Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 191:../../Source/croutine.c **** 		function must be called with interrupts disabled. */
 192:../../Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 193:../../Source/croutine.c **** 	}
 194:../../Source/croutine.c **** }
 195:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 196:../../Source/croutine.c **** 
 197:../../Source/croutine.c **** static void prvCheckPendingReadyList( void )
 198:../../Source/croutine.c **** {
 199:../../Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 200:../../Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 201:../../Source/croutine.c **** 	the	ready lists itself. */
 202:../../Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 203:../../Source/croutine.c **** 	{
 204:../../Source/croutine.c **** 		CRCB_t *pxUnblockedCRCB;
 205:../../Source/croutine.c **** 
 206:../../Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 207:../../Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 208:../../Source/croutine.c **** 		{
 209:../../Source/croutine.c **** 			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
 210:../../Source/croutine.c **** 			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 211:../../Source/croutine.c **** 		}
 212:../../Source/croutine.c **** 		portENABLE_INTERRUPTS();
 213:../../Source/croutine.c **** 
 214:../../Source/croutine.c **** 		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 215:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 216:../../Source/croutine.c **** 	}
 217:../../Source/croutine.c **** }
 218:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../../Source/croutine.c **** 
 220:../../Source/croutine.c **** static void prvCheckDelayedList( void )
 221:../../Source/croutine.c **** {
 222:../../Source/croutine.c **** CRCB_t *pxCRCB;
 223:../../Source/croutine.c **** 
 224:../../Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 225:../../Source/croutine.c **** 	while( xPassedTicks )
 226:../../Source/croutine.c **** 	{
 227:../../Source/croutine.c **** 		xCoRoutineTickCount++;
 228:../../Source/croutine.c **** 		xPassedTicks--;
 229:../../Source/croutine.c **** 
 230:../../Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 231:../../Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 232:../../Source/croutine.c **** 		{
 233:../../Source/croutine.c **** 			List_t * pxTemp;
 234:../../Source/croutine.c **** 
 235:../../Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 236:../../Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 237:../../Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 238:../../Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 239:../../Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 240:../../Source/croutine.c **** 		}
 241:../../Source/croutine.c **** 
 242:../../Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 243:../../Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 244:../../Source/croutine.c **** 		{
 245:../../Source/croutine.c **** 			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 246:../../Source/croutine.c **** 
 247:../../Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 248:../../Source/croutine.c **** 			{
 249:../../Source/croutine.c **** 				/* Timeout not yet expired. */
 250:../../Source/croutine.c **** 				break;
 251:../../Source/croutine.c **** 			}
 252:../../Source/croutine.c **** 
 253:../../Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 254:../../Source/croutine.c **** 			{
 255:../../Source/croutine.c **** 				/* The event could have occurred just before this critical
 256:../../Source/croutine.c **** 				section.  If this is the case then the generic list item will
 257:../../Source/croutine.c **** 				have been moved to the pending ready list and the following
 258:../../Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 259:../../Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 260:../../Source/croutine.c **** 				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
 261:../../Source/croutine.c **** 
 262:../../Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */
 263:../../Source/croutine.c **** 				if( pxCRCB->xEventListItem.pxContainer )
 264:../../Source/croutine.c **** 				{
 265:../../Source/croutine.c **** 					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 266:../../Source/croutine.c **** 				}
 267:../../Source/croutine.c **** 			}
 268:../../Source/croutine.c **** 			portENABLE_INTERRUPTS();
 269:../../Source/croutine.c **** 
 270:../../Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );
 271:../../Source/croutine.c **** 		}
 272:../../Source/croutine.c **** 	}
 273:../../Source/croutine.c **** 
 274:../../Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 275:../../Source/croutine.c **** }
 276:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 277:../../Source/croutine.c **** 
 278:../../Source/croutine.c **** void vCoRoutineSchedule( void )
 279:../../Source/croutine.c **** {
 280:../../Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 281:../../Source/croutine.c **** 	prvCheckPendingReadyList();
 282:../../Source/croutine.c **** 
 283:../../Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 284:../../Source/croutine.c **** 	prvCheckDelayedList();
 285:../../Source/croutine.c **** 
 286:../../Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 287:../../Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 288:../../Source/croutine.c **** 	{
 289:../../Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 290:../../Source/croutine.c **** 		{
 291:../../Source/croutine.c **** 			/* No more co-routines to check. */
 292:../../Source/croutine.c **** 			return;
 293:../../Source/croutine.c **** 		}
 294:../../Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 295:../../Source/croutine.c **** 	}
 296:../../Source/croutine.c **** 
 297:../../Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 298:../../Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 299:../../Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 300:../../Source/croutine.c **** 
 301:../../Source/croutine.c **** 	/* Call the co-routine. */
 302:../../Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 303:../../Source/croutine.c **** 
 304:../../Source/croutine.c **** 	return;
 305:../../Source/croutine.c **** }
 306:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 307:../../Source/croutine.c **** 
 308:../../Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 309:../../Source/croutine.c **** {
 310:../../Source/croutine.c **** UBaseType_t uxPriority;
 311:../../Source/croutine.c **** 
 312:../../Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 313:../../Source/croutine.c **** 	{
 314:../../Source/croutine.c **** 		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 229               	.LM5:
 230 0038 80E0      		ldi r24,lo8(pxReadyCoRoutineLists)
 231 003a 90E0      		ldi r25,hi8(pxReadyCoRoutineLists)
 232 003c 0E94 0000 		call vListInitialise
 233 0040 80E0      		ldi r24,lo8(pxReadyCoRoutineLists+9)
 234 0042 90E0      		ldi r25,hi8(pxReadyCoRoutineLists+9)
 235 0044 0E94 0000 		call vListInitialise
 315:../../Source/croutine.c **** 	}
 316:../../Source/croutine.c **** 
 317:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 237               	.LM6:
 238 0048 80E0      		ldi r24,lo8(xDelayedCoRoutineList1)
 239 004a 90E0      		ldi r25,hi8(xDelayedCoRoutineList1)
 240 004c 0E94 0000 		call vListInitialise
 318:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 242               	.LM7:
 243 0050 80E0      		ldi r24,lo8(xDelayedCoRoutineList2)
 244 0052 90E0      		ldi r25,hi8(xDelayedCoRoutineList2)
 245 0054 0E94 0000 		call vListInitialise
 319:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
 247               	.LM8:
 248 0058 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
 249 005a 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 250 005c 0E94 0000 		call vListInitialise
 320:../../Source/croutine.c **** 
 321:../../Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 322:../../Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 323:../../Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 252               	.LM9:
 253 0060 80E0      		ldi r24,lo8(xDelayedCoRoutineList1)
 254 0062 90E0      		ldi r25,hi8(xDelayedCoRoutineList1)
 255 0064 9093 0000 		sts pxDelayedCoRoutineList+1,r25
 256 0068 8093 0000 		sts pxDelayedCoRoutineList,r24
 324:../../Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 258               	.LM10:
 259 006c 80E0      		ldi r24,lo8(xDelayedCoRoutineList2)
 260 006e 90E0      		ldi r25,hi8(xDelayedCoRoutineList2)
 261 0070 9093 0000 		sts pxOverflowDelayedCoRoutineList+1,r25
 262 0074 8093 0000 		sts pxOverflowDelayedCoRoutineList,r24
 263               	.L3:
 264 0078 1111      		cpse r17,__zero_reg__
 265 007a 11E0      		ldi r17,lo8(1)
 266               	.L4:
 267               	.LBE5:
 268               	.LBE4:
 126:../../Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 270               	.LM11:
 271 007c 198E      		std Y+25,__zero_reg__
 272 007e 188E      		std Y+24,__zero_reg__
 127:../../Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 274               	.LM12:
 275 0080 1E8B      		std Y+22,r17
 128:../../Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 277               	.LM13:
 278 0082 FF8A      		std Y+23,r15
 129:../../Source/croutine.c **** 
 280               	.LM14:
 281 0084 FE01      		movw r30,r28
 282 0086 C192      		st Z+,r12
 283 0088 D192      		st Z+,r13
 284 008a 7F01      		movw r14,r30
 132:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 286               	.LM15:
 287 008c CF01      		movw r24,r30
 288 008e 0E94 0000 		call vListInitialiseItem
 133:../../Source/croutine.c **** 
 290               	.LM16:
 291 0092 CE01      		movw r24,r28
 292 0094 0C96      		adiw r24,12
 293 0096 0E94 0000 		call vListInitialiseItem
 138:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 295               	.LM17:
 296 009a D987      		std Y+9,r29
 297 009c C887      		std Y+8,r28
 139:../../Source/croutine.c **** 
 299               	.LM18:
 300 009e DB8B      		std Y+19,r29
 301 00a0 CA8B      		std Y+18,r28
 142:../../Source/croutine.c **** 
 303               	.LM19:
 304 00a2 82E0      		ldi r24,lo8(2)
 305 00a4 90E0      		ldi r25,0
 306 00a6 811B      		sub r24,r17
 307 00a8 9109      		sbc r25,__zero_reg__
 308 00aa 9D87      		std Y+13,r25
 309 00ac 8C87      		std Y+12,r24
 146:../../Source/croutine.c **** 
 311               	.LM20:
 312 00ae 8E89      		ldd r24,Y+22
 313 00b0 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 314 00b4 9817      		cp r25,r24
 315 00b6 00F4      		brsh .L5
 146:../../Source/croutine.c **** 
 317               	.LM21:
 318 00b8 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 319               	.L5:
 146:../../Source/croutine.c **** 
 321               	.LM22:
 322 00bc F9E0      		ldi r31,lo8(9)
 323 00be 8F9F      		mul r24,r31
 324 00c0 C001      		movw r24,r0
 325 00c2 1124      		clr __zero_reg__
 326 00c4 B701      		movw r22,r14
 327 00c6 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 328 00c8 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 329 00ca 0E94 0000 		call vListInsertEnd
 148:../../Source/croutine.c **** 	}
 331               	.LM23:
 332 00ce 81E0      		ldi r24,lo8(1)
 333 00d0 00C0      		rjmp .L2
 334               	.L6:
 152:../../Source/croutine.c **** 	}
 336               	.LM24:
 337 00d2 8FEF      		ldi r24,lo8(-1)
 338               	.L2:
 339               	/* epilogue start */
 156:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 341               	.LM25:
 342 00d4 DF91      		pop r29
 343 00d6 CF91      		pop r28
 344 00d8 1F91      		pop r17
 345 00da FF90      		pop r15
 346 00dc EF90      		pop r14
 347 00de DF90      		pop r13
 348 00e0 CF90      		pop r12
 349 00e2 0895      		ret
 355               	.Lscope1:
 357               		.stabd	78,0,0
 361               	.global	vCoRoutineAddToDelayedList
 363               	vCoRoutineAddToDelayedList:
 364               		.stabd	46,0,0
 160:../../Source/croutine.c **** TickType_t xTimeToWake;
 366               	.LM26:
 367               	.LFBB2:
 368 00e4 0F93      		push r16
 369 00e6 1F93      		push r17
 370 00e8 CF93      		push r28
 371 00ea DF93      		push r29
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 4 */
 375               	.L__stack_usage = 4
 376 00ec 8B01      		movw r16,r22
 165:../../Source/croutine.c **** 
 378               	.LM27:
 379 00ee C091 0000 		lds r28,xCoRoutineTickCount
 380 00f2 D091 0000 		lds r29,xCoRoutineTickCount+1
 381 00f6 C80F      		add r28,r24
 382 00f8 D91F      		adc r29,r25
 170:../../Source/croutine.c **** 
 384               	.LM28:
 385 00fa 8091 0000 		lds r24,pxCurrentCoRoutine
 386 00fe 9091 0000 		lds r25,pxCurrentCoRoutine+1
 387 0102 0296      		adiw r24,2
 388 0104 0E94 0000 		call uxListRemove
 173:../../Source/croutine.c **** 
 390               	.LM29:
 391 0108 E091 0000 		lds r30,pxCurrentCoRoutine
 392 010c F091 0000 		lds r31,pxCurrentCoRoutine+1
 393 0110 D383      		std Z+3,r29
 394 0112 C283      		std Z+2,r28
 175:../../Source/croutine.c **** 	{
 396               	.LM30:
 397 0114 8091 0000 		lds r24,xCoRoutineTickCount
 398 0118 9091 0000 		lds r25,xCoRoutineTickCount+1
 399 011c BF01      		movw r22,r30
 400 011e 6E5F      		subi r22,-2
 401 0120 7F4F      		sbci r23,-1
 402 0122 C817      		cp r28,r24
 403 0124 D907      		cpc r29,r25
 404 0126 00F4      		brsh .L12
 179:../../Source/croutine.c **** 	}
 406               	.LM31:
 407 0128 8091 0000 		lds r24,pxOverflowDelayedCoRoutineList
 408 012c 9091 0000 		lds r25,pxOverflowDelayedCoRoutineList+1
 409 0130 00C0      		rjmp .L15
 410               	.L12:
 185:../../Source/croutine.c **** 	}
 412               	.LM32:
 413 0132 8091 0000 		lds r24,pxDelayedCoRoutineList
 414 0136 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 415               	.L15:
 416 013a 0E94 0000 		call vListInsert
 188:../../Source/croutine.c **** 	{
 418               	.LM33:
 419 013e 0115      		cp r16,__zero_reg__
 420 0140 1105      		cpc r17,__zero_reg__
 421 0142 01F0      		breq .L11
 192:../../Source/croutine.c **** 	}
 423               	.LM34:
 424 0144 6091 0000 		lds r22,pxCurrentCoRoutine
 425 0148 7091 0000 		lds r23,pxCurrentCoRoutine+1
 426 014c 645F      		subi r22,-12
 427 014e 7F4F      		sbci r23,-1
 428 0150 C801      		movw r24,r16
 429               	/* epilogue start */
 194:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 431               	.LM35:
 432 0152 DF91      		pop r29
 433 0154 CF91      		pop r28
 434 0156 1F91      		pop r17
 435 0158 0F91      		pop r16
 192:../../Source/croutine.c **** 	}
 437               	.LM36:
 438 015a 0C94 0000 		jmp vListInsert
 439               	.L11:
 440               	/* epilogue start */
 194:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 442               	.LM37:
 443 015e DF91      		pop r29
 444 0160 CF91      		pop r28
 445 0162 1F91      		pop r17
 446 0164 0F91      		pop r16
 447 0166 0895      		ret
 452               	.Lscope2:
 454               		.stabd	78,0,0
 456               	.global	vCoRoutineSchedule
 458               	vCoRoutineSchedule:
 459               		.stabd	46,0,0
 279:../../Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 461               	.LM38:
 462               	.LFBB3:
 463 0168 FF92      		push r15
 464 016a 0F93      		push r16
 465 016c 1F93      		push r17
 466 016e CF93      		push r28
 467 0170 DF93      		push r29
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 5 */
 471               	.L__stack_usage = 5
 472               	.LBB13:
 473               	.LBB14:
 474               	.LBB15:
 215:../../Source/croutine.c **** 	}
 476               	.LM39:
 477 0172 99E0      		ldi r25,lo8(9)
 478 0174 F92E      		mov r15,r25
 479               	.L17:
 480               	.LBE15:
 202:../../Source/croutine.c **** 	{
 482               	.LM40:
 483 0176 8091 0000 		lds r24,xPendingReadyCoRoutineList
 484 017a 8823      		tst r24
 485 017c 01F0      		breq .L37
 486               	.LBB16:
 207:../../Source/croutine.c **** 		{
 488               	.LM41:
 489               	/* #APP */
 490               	 ;  207 "../../Source/croutine.c" 1
 491 017e F894      		cli
 492               	 ;  0 "" 2
 209:../../Source/croutine.c **** 			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 494               	.LM42:
 495               	/* #NOAPP */
 496 0180 E091 0000 		lds r30,xPendingReadyCoRoutineList+5
 497 0184 F091 0000 		lds r31,xPendingReadyCoRoutineList+5+1
 498 0188 C681      		ldd r28,Z+6
 499 018a D781      		ldd r29,Z+7
 210:../../Source/croutine.c **** 		}
 501               	.LM43:
 502 018c CE01      		movw r24,r28
 503 018e 0C96      		adiw r24,12
 504 0190 0E94 0000 		call uxListRemove
 212:../../Source/croutine.c **** 
 506               	.LM44:
 507               	/* #APP */
 508               	 ;  212 "../../Source/croutine.c" 1
 509 0194 7894      		sei
 510               	 ;  0 "" 2
 214:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 512               	.LM45:
 513               	/* #NOAPP */
 514 0196 8E01      		movw r16,r28
 515 0198 0E5F      		subi r16,-2
 516 019a 1F4F      		sbci r17,-1
 517 019c C801      		movw r24,r16
 518 019e 0E94 0000 		call uxListRemove
 215:../../Source/croutine.c **** 	}
 520               	.LM46:
 521 01a2 8E89      		ldd r24,Y+22
 522 01a4 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 523 01a8 9817      		cp r25,r24
 524 01aa 00F4      		brsh .L18
 525 01ac 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 526               	.L18:
 527 01b0 F89E      		mul r15,r24
 528 01b2 C001      		movw r24,r0
 529 01b4 1124      		clr __zero_reg__
 530 01b6 B801      		movw r22,r16
 531 01b8 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 532 01ba 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 533 01bc 0E94 0000 		call vListInsertEnd
 534 01c0 00C0      		rjmp .L17
 535               	.L37:
 536               	.LBE16:
 537               	.LBE14:
 538               	.LBE13:
 539               	.LBB17:
 540               	.LBB18:
 224:../../Source/croutine.c **** 	while( xPassedTicks )
 542               	.LM47:
 543 01c2 0E94 0000 		call xTaskGetTickCount
 544 01c6 2091 0000 		lds r18,xLastTickCount
 545 01ca 3091 0000 		lds r19,xLastTickCount+1
 546 01ce 821B      		sub r24,r18
 547 01d0 930B      		sbc r25,r19
 548 01d2 9093 0000 		sts xPassedTicks+1,r25
 549 01d6 8093 0000 		sts xPassedTicks,r24
 270:../../Source/croutine.c **** 		}
 551               	.LM48:
 552 01da 89E0      		ldi r24,lo8(9)
 553 01dc F82E      		mov r15,r24
 554               	.L34:
 225:../../Source/croutine.c **** 	{
 556               	.LM49:
 557 01de 2091 0000 		lds r18,xPassedTicks
 558 01e2 3091 0000 		lds r19,xPassedTicks+1
 559 01e6 8091 0000 		lds r24,xCoRoutineTickCount
 560 01ea 9091 0000 		lds r25,xCoRoutineTickCount+1
 561 01ee 2115      		cp r18,__zero_reg__
 562 01f0 3105      		cpc r19,__zero_reg__
 563 01f2 01F4      		brne .+2
 564 01f4 00C0      		rjmp .L38
 227:../../Source/croutine.c **** 		xPassedTicks--;
 566               	.LM50:
 567 01f6 0196      		adiw r24,1
 568 01f8 9093 0000 		sts xCoRoutineTickCount+1,r25
 569 01fc 8093 0000 		sts xCoRoutineTickCount,r24
 228:../../Source/croutine.c **** 
 571               	.LM51:
 572 0200 2150      		subi r18,1
 573 0202 3109      		sbc r19,__zero_reg__
 574 0204 3093 0000 		sts xPassedTicks+1,r19
 575 0208 2093 0000 		sts xPassedTicks,r18
 231:../../Source/croutine.c **** 		{
 577               	.LM52:
 578 020c 892B      		or r24,r25
 579 020e 01F0      		breq .+2
 580 0210 00C0      		rjmp .L22
 581               	.LBB19:
 237:../../Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 583               	.LM53:
 584 0212 8091 0000 		lds r24,pxDelayedCoRoutineList
 585 0216 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 238:../../Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 587               	.LM54:
 588 021a 2091 0000 		lds r18,pxOverflowDelayedCoRoutineList
 589 021e 3091 0000 		lds r19,pxOverflowDelayedCoRoutineList+1
 590 0222 3093 0000 		sts pxDelayedCoRoutineList+1,r19
 591 0226 2093 0000 		sts pxDelayedCoRoutineList,r18
 239:../../Source/croutine.c **** 		}
 593               	.LM55:
 594 022a 9093 0000 		sts pxOverflowDelayedCoRoutineList+1,r25
 595 022e 8093 0000 		sts pxOverflowDelayedCoRoutineList,r24
 596 0232 00C0      		rjmp .L22
 597               	.L25:
 598               	.LBE19:
 245:../../Source/croutine.c **** 
 600               	.LM56:
 601 0234 0580      		ldd __tmp_reg__,Z+5
 602 0236 F681      		ldd r31,Z+6
 603 0238 E02D      		mov r30,__tmp_reg__
 604 023a C681      		ldd r28,Z+6
 605 023c D781      		ldd r29,Z+7
 247:../../Source/croutine.c **** 			{
 607               	.LM57:
 608 023e 2A81      		ldd r18,Y+2
 609 0240 3B81      		ldd r19,Y+3
 610 0242 8091 0000 		lds r24,xCoRoutineTickCount
 611 0246 9091 0000 		lds r25,xCoRoutineTickCount+1
 612 024a 8217      		cp r24,r18
 613 024c 9307      		cpc r25,r19
 614 024e 00F0      		brlo .L34
 253:../../Source/croutine.c **** 			{
 616               	.LM58:
 617               	/* #APP */
 618               	 ;  253 "../../Source/croutine.c" 1
 619 0250 F894      		cli
 620               	 ;  0 "" 2
 260:../../Source/croutine.c **** 
 622               	.LM59:
 623               	/* #NOAPP */
 624 0252 8E01      		movw r16,r28
 625 0254 0E5F      		subi r16,-2
 626 0256 1F4F      		sbci r17,-1
 627 0258 C801      		movw r24,r16
 628 025a 0E94 0000 		call uxListRemove
 263:../../Source/croutine.c **** 				{
 630               	.LM60:
 631 025e 8C89      		ldd r24,Y+20
 632 0260 9D89      		ldd r25,Y+21
 633 0262 892B      		or r24,r25
 634 0264 01F0      		breq .L23
 265:../../Source/croutine.c **** 				}
 636               	.LM61:
 637 0266 CE01      		movw r24,r28
 638 0268 0C96      		adiw r24,12
 639 026a 0E94 0000 		call uxListRemove
 640               	.L23:
 268:../../Source/croutine.c **** 
 642               	.LM62:
 643               	/* #APP */
 644               	 ;  268 "../../Source/croutine.c" 1
 645 026e 7894      		sei
 646               	 ;  0 "" 2
 270:../../Source/croutine.c **** 		}
 648               	.LM63:
 649               	/* #NOAPP */
 650 0270 8E89      		ldd r24,Y+22
 651 0272 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 652 0276 9817      		cp r25,r24
 653 0278 00F4      		brsh .L24
 654 027a 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 655               	.L24:
 656 027e F89E      		mul r15,r24
 657 0280 C001      		movw r24,r0
 658 0282 1124      		clr __zero_reg__
 659 0284 B801      		movw r22,r16
 660 0286 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 661 0288 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 662 028a 0E94 0000 		call vListInsertEnd
 663               	.L22:
 243:../../Source/croutine.c **** 		{
 665               	.LM64:
 666 028e E091 0000 		lds r30,pxDelayedCoRoutineList
 667 0292 F091 0000 		lds r31,pxDelayedCoRoutineList+1
 668 0296 8081      		ld r24,Z
 669 0298 8111      		cpse r24,__zero_reg__
 670 029a 00C0      		rjmp .L25
 671 029c 00C0      		rjmp .L34
 672               	.L38:
 274:../../Source/croutine.c **** }
 674               	.LM65:
 675 029e 9093 0000 		sts xLastTickCount+1,r25
 676 02a2 8093 0000 		sts xLastTickCount,r24
 677 02a6 8091 0000 		lds r24,uxTopCoRoutineReadyPriority
 678               	.LBE18:
 679               	.LBE17:
 287:../../Source/croutine.c **** 	{
 681               	.LM66:
 682 02aa 69E0      		ldi r22,lo8(9)
 683               	.L27:
 684 02ac 482F      		mov r20,r24
 685 02ae 50E0      		ldi r21,0
 686 02b0 649F      		mul r22,r20
 687 02b2 9001      		movw r18,r0
 688 02b4 659F      		mul r22,r21
 689 02b6 300D      		add r19,r0
 690 02b8 1124      		clr __zero_reg__
 691 02ba F901      		movw r30,r18
 692 02bc E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 693 02be F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 694 02c0 9081      		ld r25,Z
 695 02c2 9111      		cpse r25,__zero_reg__
 696 02c4 00C0      		rjmp .L39
 289:../../Source/croutine.c **** 		{
 698               	.LM67:
 699 02c6 8111      		cpse r24,__zero_reg__
 700 02c8 00C0      		rjmp .L28
 701 02ca 1092 0000 		sts uxTopCoRoutineReadyPriority,__zero_reg__
 702               	/* epilogue start */
 305:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 704               	.LM68:
 705 02ce DF91      		pop r29
 706 02d0 CF91      		pop r28
 707 02d2 1F91      		pop r17
 708 02d4 0F91      		pop r16
 709 02d6 FF90      		pop r15
 710 02d8 0895      		ret
 711               	.L28:
 294:../../Source/croutine.c **** 	}
 713               	.LM69:
 714 02da 8150      		subi r24,lo8(-(-1))
 715 02dc 00C0      		rjmp .L27
 716               	.L39:
 717 02de 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 718               	.LBB20:
 299:../../Source/croutine.c **** 
 720               	.LM70:
 721 02e2 A181      		ldd r26,Z+1
 722 02e4 B281      		ldd r27,Z+2
 723 02e6 1296      		adiw r26,2
 724 02e8 0D90      		ld __tmp_reg__,X+
 725 02ea BC91      		ld r27,X
 726 02ec A02D      		mov r26,__tmp_reg__
 727 02ee B283      		std Z+2,r27
 728 02f0 A183      		std Z+1,r26
 729 02f2 2050      		subi r18,lo8(-(pxReadyCoRoutineLists+3))
 730 02f4 3040      		sbci r19,hi8(-(pxReadyCoRoutineLists+3))
 731 02f6 A217      		cp r26,r18
 732 02f8 B307      		cpc r27,r19
 733 02fa 01F4      		brne .L31
 299:../../Source/croutine.c **** 
 735               	.LM71:
 736 02fc 1296      		adiw r26,2
 737 02fe 8D91      		ld r24,X+
 738 0300 9C91      		ld r25,X
 739 0302 1397      		sbiw r26,2+1
 740 0304 9283      		std Z+2,r25
 741 0306 8183      		std Z+1,r24
 742               	.L31:
 299:../../Source/croutine.c **** 
 744               	.LM72:
 745 0308 89E0      		ldi r24,lo8(9)
 746 030a 849F      		mul r24,r20
 747 030c F001      		movw r30,r0
 748 030e 859F      		mul r24,r21
 749 0310 F00D      		add r31,r0
 750 0312 1124      		clr __zero_reg__
 751 0314 E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 752 0316 F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 753 0318 0180      		ldd __tmp_reg__,Z+1
 754 031a F281      		ldd r31,Z+2
 755 031c E02D      		mov r30,__tmp_reg__
 756 031e 8681      		ldd r24,Z+6
 757 0320 9781      		ldd r25,Z+7
 758 0322 9093 0000 		sts pxCurrentCoRoutine+1,r25
 759 0326 8093 0000 		sts pxCurrentCoRoutine,r24
 760               	.LBE20:
 302:../../Source/croutine.c **** 
 762               	.LM73:
 763 032a DC01      		movw r26,r24
 764 032c ED91      		ld r30,X+
 765 032e FC91      		ld r31,X
 766 0330 1197      		sbiw r26,1
 767 0332 5796      		adiw r26,23
 768 0334 6C91      		ld r22,X
 769               	/* epilogue start */
 305:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 771               	.LM74:
 772 0336 DF91      		pop r29
 773 0338 CF91      		pop r28
 774 033a 1F91      		pop r17
 775 033c 0F91      		pop r16
 776 033e FF90      		pop r15
 302:../../Source/croutine.c **** 
 778               	.LM75:
 779 0340 0994      		ijmp
 793               	.Lscope3:
 795               		.stabd	78,0,0
 798               	.global	xCoRoutineRemoveFromEventList
 800               	xCoRoutineRemoveFromEventList:
 801               		.stabd	46,0,0
 325:../../Source/croutine.c **** }
 326:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 327:../../Source/croutine.c **** 
 328:../../Source/croutine.c **** BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
 329:../../Source/croutine.c **** {
 803               	.LM76:
 804               	.LFBB4:
 805 0342 0F93      		push r16
 806 0344 1F93      		push r17
 807 0346 CF93      		push r28
 808 0348 DF93      		push r29
 809               	/* prologue: function */
 810               	/* frame size = 0 */
 811               	/* stack size = 4 */
 812               	.L__stack_usage = 4
 330:../../Source/croutine.c **** CRCB_t *pxUnblockedCRCB;
 331:../../Source/croutine.c **** BaseType_t xReturn;
 332:../../Source/croutine.c **** 
 333:../../Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 334:../../Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 335:../../Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 336:../../Source/croutine.c **** 	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 814               	.LM77:
 815 034a DC01      		movw r26,r24
 816 034c 1596      		adiw r26,5
 817 034e ED91      		ld r30,X+
 818 0350 FC91      		ld r31,X
 819 0352 1697      		sbiw r26,5+1
 820 0354 C681      		ldd r28,Z+6
 821 0356 D781      		ldd r29,Z+7
 337:../../Source/croutine.c **** 	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 823               	.LM78:
 824 0358 8E01      		movw r16,r28
 825 035a 045F      		subi r16,-12
 826 035c 1F4F      		sbci r17,-1
 827 035e C801      		movw r24,r16
 828 0360 0E94 0000 		call uxListRemove
 338:../../Source/croutine.c **** 	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem )
 830               	.LM79:
 831 0364 B801      		movw r22,r16
 832 0366 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
 833 0368 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 834 036a 0E94 0000 		call vListInsertEnd
 339:../../Source/croutine.c **** 
 340:../../Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 836               	.LM80:
 837 036e E091 0000 		lds r30,pxCurrentCoRoutine
 838 0372 F091 0000 		lds r31,pxCurrentCoRoutine+1
 341:../../Source/croutine.c **** 	{
 342:../../Source/croutine.c **** 		xReturn = pdTRUE;
 343:../../Source/croutine.c **** 	}
 344:../../Source/croutine.c **** 	else
 345:../../Source/croutine.c **** 	{
 346:../../Source/croutine.c **** 		xReturn = pdFALSE;
 347:../../Source/croutine.c **** 	}
 348:../../Source/croutine.c **** 
 349:../../Source/croutine.c **** 	return xReturn;
 840               	.LM81:
 841 0376 81E0      		ldi r24,lo8(1)
 842 0378 2E89      		ldd r18,Y+22
 843 037a 9689      		ldd r25,Z+22
 844 037c 2917      		cp r18,r25
 845 037e 00F4      		brsh .L41
 846 0380 80E0      		ldi r24,0
 847               	.L41:
 848               	/* epilogue start */
 350:../../Source/croutine.c **** }
 850               	.LM82:
 851 0382 DF91      		pop r29
 852 0384 CF91      		pop r28
 853 0386 1F91      		pop r17
 854 0388 0F91      		pop r16
 855 038a 0895      		ret
 860               	.Lscope4:
 862               		.stabd	78,0,0
 863               		.local	xPassedTicks
 864               		.comm	xPassedTicks,2,1
 865               		.local	xLastTickCount
 866               		.comm	xLastTickCount,2,1
 867               		.local	xCoRoutineTickCount
 868               		.comm	xCoRoutineTickCount,2,1
 869               		.local	uxTopCoRoutineReadyPriority
 870               		.comm	uxTopCoRoutineReadyPriority,1,1
 871               	.global	pxCurrentCoRoutine
 872               		.section .bss
 875               	pxCurrentCoRoutine:
 876 0000 0000      		.zero	2
 877               		.local	xPendingReadyCoRoutineList
 878               		.comm	xPendingReadyCoRoutineList,9,1
 879               		.local	pxOverflowDelayedCoRoutineList
 880               		.comm	pxOverflowDelayedCoRoutineList,2,1
 881               		.local	pxDelayedCoRoutineList
 882               		.comm	pxDelayedCoRoutineList,2,1
 883               		.local	xDelayedCoRoutineList2
 884               		.comm	xDelayedCoRoutineList2,9,1
 885               		.local	xDelayedCoRoutineList1
 886               		.comm	xDelayedCoRoutineList1,9,1
 887               		.local	pxReadyCoRoutineLists
 888               		.comm	pxReadyCoRoutineLists,18,1
 900               		.text
 902               	.Letext0:
 903               		.ident	"GCC: (GNU) 5.4.0"
 904               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 croutine.c
     /tmp/cczwwxt7.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczwwxt7.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczwwxt7.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczwwxt7.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczwwxt7.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczwwxt7.s:186    .text:0000000000000000 xCoRoutineCreate
     /tmp/cczwwxt7.s:875    .bss:0000000000000000 pxCurrentCoRoutine
     /tmp/cczwwxt7.s:886    .bss:0000000000000028 pxReadyCoRoutineLists
     /tmp/cczwwxt7.s:884    .bss:000000000000001f xDelayedCoRoutineList1
     /tmp/cczwwxt7.s:882    .bss:0000000000000016 xDelayedCoRoutineList2
     /tmp/cczwwxt7.s:870    .bss:0000000000000009 xPendingReadyCoRoutineList
     /tmp/cczwwxt7.s:880    .bss:0000000000000014 pxDelayedCoRoutineList
     /tmp/cczwwxt7.s:878    .bss:0000000000000012 pxOverflowDelayedCoRoutineList
     /tmp/cczwwxt7.s:868    .bss:0000000000000008 uxTopCoRoutineReadyPriority
     /tmp/cczwwxt7.s:363    .text:00000000000000e4 vCoRoutineAddToDelayedList
     /tmp/cczwwxt7.s:866    .bss:0000000000000006 xCoRoutineTickCount
     /tmp/cczwwxt7.s:458    .text:0000000000000168 vCoRoutineSchedule
     /tmp/cczwwxt7.s:864    .bss:0000000000000004 xLastTickCount
                             .bss:0000000000000002 xPassedTicks
     /tmp/cczwwxt7.s:800    .text:0000000000000342 xCoRoutineRemoveFromEventList

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vListInitialiseItem
vListInsertEnd
uxListRemove
vListInsert
xTaskGetTickCount
__do_clear_bss
