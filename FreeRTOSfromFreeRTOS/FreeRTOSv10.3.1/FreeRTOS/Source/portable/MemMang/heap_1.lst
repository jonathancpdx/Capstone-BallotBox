   1               		.file	"heap_1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 183               	.global	pvPortMalloc
 185               	pvPortMalloc:
 186               		.stabd	46,0,0
   1:../../Source/portable/MemMang/heap_1.c **** /*
   2:../../Source/portable/MemMang/heap_1.c ****  * FreeRTOS Kernel V10.3.1
   3:../../Source/portable/MemMang/heap_1.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../Source/portable/MemMang/heap_1.c ****  *
   5:../../Source/portable/MemMang/heap_1.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../Source/portable/MemMang/heap_1.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../Source/portable/MemMang/heap_1.c ****  * the Software without restriction, including without limitation the rights to
   8:../../Source/portable/MemMang/heap_1.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../Source/portable/MemMang/heap_1.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../Source/portable/MemMang/heap_1.c ****  * subject to the following conditions:
  11:../../Source/portable/MemMang/heap_1.c ****  *
  12:../../Source/portable/MemMang/heap_1.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../Source/portable/MemMang/heap_1.c ****  * copies or substantial portions of the Software.
  14:../../Source/portable/MemMang/heap_1.c ****  *
  15:../../Source/portable/MemMang/heap_1.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../Source/portable/MemMang/heap_1.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../Source/portable/MemMang/heap_1.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../Source/portable/MemMang/heap_1.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../Source/portable/MemMang/heap_1.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../Source/portable/MemMang/heap_1.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../Source/portable/MemMang/heap_1.c ****  *
  22:../../Source/portable/MemMang/heap_1.c ****  * http://www.FreeRTOS.org
  23:../../Source/portable/MemMang/heap_1.c ****  * http://aws.amazon.com/freertos
  24:../../Source/portable/MemMang/heap_1.c ****  *
  25:../../Source/portable/MemMang/heap_1.c ****  * 1 tab == 4 spaces!
  26:../../Source/portable/MemMang/heap_1.c ****  */
  27:../../Source/portable/MemMang/heap_1.c **** 
  28:../../Source/portable/MemMang/heap_1.c **** 
  29:../../Source/portable/MemMang/heap_1.c **** /*
  30:../../Source/portable/MemMang/heap_1.c ****  * The simplest possible implementation of pvPortMalloc().  Note that this
  31:../../Source/portable/MemMang/heap_1.c ****  * implementation does NOT allow allocated memory to be freed again.
  32:../../Source/portable/MemMang/heap_1.c ****  *
  33:../../Source/portable/MemMang/heap_1.c ****  * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
  34:../../Source/portable/MemMang/heap_1.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  35:../../Source/portable/MemMang/heap_1.c ****  */
  36:../../Source/portable/MemMang/heap_1.c **** #include <stdlib.h>
  37:../../Source/portable/MemMang/heap_1.c **** 
  38:../../Source/portable/MemMang/heap_1.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  39:../../Source/portable/MemMang/heap_1.c **** all the API functions to use the MPU wrappers.  That should only be done when
  40:../../Source/portable/MemMang/heap_1.c **** task.h is included from an application file. */
  41:../../Source/portable/MemMang/heap_1.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  42:../../Source/portable/MemMang/heap_1.c **** 
  43:../../Source/portable/MemMang/heap_1.c **** #include "FreeRTOS.h"
  44:../../Source/portable/MemMang/heap_1.c **** #include "task.h"
  45:../../Source/portable/MemMang/heap_1.c **** 
  46:../../Source/portable/MemMang/heap_1.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  47:../../Source/portable/MemMang/heap_1.c **** 
  48:../../Source/portable/MemMang/heap_1.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  49:../../Source/portable/MemMang/heap_1.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  50:../../Source/portable/MemMang/heap_1.c **** #endif
  51:../../Source/portable/MemMang/heap_1.c **** 
  52:../../Source/portable/MemMang/heap_1.c **** /* A few bytes might be lost to byte aligning the heap start address. */
  53:../../Source/portable/MemMang/heap_1.c **** #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  54:../../Source/portable/MemMang/heap_1.c **** 
  55:../../Source/portable/MemMang/heap_1.c **** /* Allocate the memory for the heap. */
  56:../../Source/portable/MemMang/heap_1.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
  57:../../Source/portable/MemMang/heap_1.c **** 	/* The application writer has already defined the array used for the RTOS
  58:../../Source/portable/MemMang/heap_1.c **** 	heap - probably so it can be placed in a special segment or address. */
  59:../../Source/portable/MemMang/heap_1.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  60:../../Source/portable/MemMang/heap_1.c **** #else
  61:../../Source/portable/MemMang/heap_1.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  62:../../Source/portable/MemMang/heap_1.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  63:../../Source/portable/MemMang/heap_1.c **** 
  64:../../Source/portable/MemMang/heap_1.c **** /* Index into the ucHeap array. */
  65:../../Source/portable/MemMang/heap_1.c **** static size_t xNextFreeByte = ( size_t ) 0;
  66:../../Source/portable/MemMang/heap_1.c **** 
  67:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
  68:../../Source/portable/MemMang/heap_1.c **** 
  69:../../Source/portable/MemMang/heap_1.c **** void *pvPortMalloc( size_t xWantedSize )
  70:../../Source/portable/MemMang/heap_1.c **** {
 188               	.LM0:
 189               	.LFBB1:
 190 0000 CF93      		push r28
 191 0002 DF93      		push r29
 192               	/* prologue: function */
 193               	/* frame size = 0 */
 194               	/* stack size = 2 */
 195               	.L__stack_usage = 2
 196 0004 EC01      		movw r28,r24
  71:../../Source/portable/MemMang/heap_1.c **** void *pvReturn = NULL;
  72:../../Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
  73:../../Source/portable/MemMang/heap_1.c **** 
  74:../../Source/portable/MemMang/heap_1.c **** 	/* Ensure that blocks are always aligned to the required number of bytes. */
  75:../../Source/portable/MemMang/heap_1.c **** 	#if( portBYTE_ALIGNMENT != 1 )
  76:../../Source/portable/MemMang/heap_1.c **** 	{
  77:../../Source/portable/MemMang/heap_1.c **** 		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  78:../../Source/portable/MemMang/heap_1.c **** 		{
  79:../../Source/portable/MemMang/heap_1.c **** 			/* Byte alignment required. */
  80:../../Source/portable/MemMang/heap_1.c **** 			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  81:../../Source/portable/MemMang/heap_1.c **** 		}
  82:../../Source/portable/MemMang/heap_1.c **** 	}
  83:../../Source/portable/MemMang/heap_1.c **** 	#endif
  84:../../Source/portable/MemMang/heap_1.c **** 
  85:../../Source/portable/MemMang/heap_1.c **** 	vTaskSuspendAll();
 198               	.LM1:
 199 0006 0E94 0000 		call vTaskSuspendAll
  86:../../Source/portable/MemMang/heap_1.c **** 	{
  87:../../Source/portable/MemMang/heap_1.c **** 		if( pucAlignedHeap == NULL )
 201               	.LM2:
 202 000a 8091 0000 		lds r24,pucAlignedHeap.2101
 203 000e 9091 0000 		lds r25,pucAlignedHeap.2101+1
 204 0012 892B      		or r24,r25
 205 0014 01F4      		brne .L2
  88:../../Source/portable/MemMang/heap_1.c **** 		{
  89:../../Source/portable/MemMang/heap_1.c **** 			/* Ensure the heap starts on a correctly aligned boundary. */
  90:../../Source/portable/MemMang/heap_1.c **** 			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & (
 207               	.LM3:
 208 0016 80E0      		ldi r24,lo8(ucHeap+1)
 209 0018 90E0      		ldi r25,hi8(ucHeap+1)
 210 001a 9093 0000 		sts pucAlignedHeap.2101+1,r25
 211 001e 8093 0000 		sts pucAlignedHeap.2101,r24
 212               	.L2:
  91:../../Source/portable/MemMang/heap_1.c **** 		}
  92:../../Source/portable/MemMang/heap_1.c **** 
  93:../../Source/portable/MemMang/heap_1.c **** 		/* Check there is enough room left for the allocation. */
  94:../../Source/portable/MemMang/heap_1.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 214               	.LM4:
 215 0022 2091 0000 		lds r18,xNextFreeByte
 216 0026 3091 0000 		lds r19,xNextFreeByte+1
 217 002a C901      		movw r24,r18
 218 002c 8C0F      		add r24,r28
 219 002e 9D1F      		adc r25,r29
 220 0030 8B3D      		cpi r24,-37
 221 0032 45E0      		ldi r20,5
 222 0034 9407      		cpc r25,r20
 223 0036 00F4      		brsh .L5
 225               	.LM5:
 226 0038 2817      		cp r18,r24
 227 003a 3907      		cpc r19,r25
 228 003c 00F4      		brsh .L5
  95:../../Source/portable/MemMang/heap_1.c **** 			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
  96:../../Source/portable/MemMang/heap_1.c **** 		{
  97:../../Source/portable/MemMang/heap_1.c **** 			/* Return the next free byte then increment the index past this
  98:../../Source/portable/MemMang/heap_1.c **** 			block. */
  99:../../Source/portable/MemMang/heap_1.c **** 			pvReturn = pucAlignedHeap + xNextFreeByte;
 230               	.LM6:
 231 003e C091 0000 		lds r28,pucAlignedHeap.2101
 232 0042 D091 0000 		lds r29,pucAlignedHeap.2101+1
 233 0046 C20F      		add r28,r18
 234 0048 D31F      		adc r29,r19
 100:../../Source/portable/MemMang/heap_1.c **** 			xNextFreeByte += xWantedSize;
 236               	.LM7:
 237 004a 9093 0000 		sts xNextFreeByte+1,r25
 238 004e 8093 0000 		sts xNextFreeByte,r24
 239 0052 00C0      		rjmp .L3
 240               	.L5:
  71:../../Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
 242               	.LM8:
 243 0054 C0E0      		ldi r28,0
 244 0056 D0E0      		ldi r29,0
 245               	.L3:
 101:../../Source/portable/MemMang/heap_1.c **** 		}
 102:../../Source/portable/MemMang/heap_1.c **** 
 103:../../Source/portable/MemMang/heap_1.c **** 		traceMALLOC( pvReturn, xWantedSize );
 104:../../Source/portable/MemMang/heap_1.c **** 	}
 105:../../Source/portable/MemMang/heap_1.c **** 	( void ) xTaskResumeAll();
 247               	.LM9:
 248 0058 0E94 0000 		call xTaskResumeAll
 106:../../Source/portable/MemMang/heap_1.c **** 
 107:../../Source/portable/MemMang/heap_1.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 108:../../Source/portable/MemMang/heap_1.c **** 	{
 109:../../Source/portable/MemMang/heap_1.c **** 		if( pvReturn == NULL )
 110:../../Source/portable/MemMang/heap_1.c **** 		{
 111:../../Source/portable/MemMang/heap_1.c **** 			extern void vApplicationMallocFailedHook( void );
 112:../../Source/portable/MemMang/heap_1.c **** 			vApplicationMallocFailedHook();
 113:../../Source/portable/MemMang/heap_1.c **** 		}
 114:../../Source/portable/MemMang/heap_1.c **** 	}
 115:../../Source/portable/MemMang/heap_1.c **** 	#endif
 116:../../Source/portable/MemMang/heap_1.c **** 
 117:../../Source/portable/MemMang/heap_1.c **** 	return pvReturn;
 118:../../Source/portable/MemMang/heap_1.c **** }
 250               	.LM10:
 251 005c CE01      		movw r24,r28
 252               	/* epilogue start */
 253 005e DF91      		pop r29
 254 0060 CF91      		pop r28
 255 0062 0895      		ret
 261               	.Lscope1:
 263               		.stabd	78,0,0
 266               	.global	vPortFree
 268               	vPortFree:
 269               		.stabd	46,0,0
 119:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 120:../../Source/portable/MemMang/heap_1.c **** 
 121:../../Source/portable/MemMang/heap_1.c **** void vPortFree( void *pv )
 122:../../Source/portable/MemMang/heap_1.c **** {
 271               	.LM11:
 272               	.LFBB2:
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 277 0064 0895      		ret
 279               	.Lscope2:
 281               		.stabd	78,0,0
 283               	.global	vPortInitialiseBlocks
 285               	vPortInitialiseBlocks:
 286               		.stabd	46,0,0
 123:../../Source/portable/MemMang/heap_1.c **** 	/* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
 124:../../Source/portable/MemMang/heap_1.c **** 	heap_4.c for alternative implementations, and the memory management pages of
 125:../../Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org for more information. */
 126:../../Source/portable/MemMang/heap_1.c **** 	( void ) pv;
 127:../../Source/portable/MemMang/heap_1.c **** 
 128:../../Source/portable/MemMang/heap_1.c **** 	/* Force an assert as it is invalid to call this function. */
 129:../../Source/portable/MemMang/heap_1.c **** 	configASSERT( pv == NULL );
 130:../../Source/portable/MemMang/heap_1.c **** }
 131:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 132:../../Source/portable/MemMang/heap_1.c **** 
 133:../../Source/portable/MemMang/heap_1.c **** void vPortInitialiseBlocks( void )
 134:../../Source/portable/MemMang/heap_1.c **** {
 288               	.LM12:
 289               	.LFBB3:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 135:../../Source/portable/MemMang/heap_1.c **** 	/* Only required when static memory is not cleared. */
 136:../../Source/portable/MemMang/heap_1.c **** 	xNextFreeByte = ( size_t ) 0;
 295               	.LM13:
 296 0066 1092 0000 		sts xNextFreeByte+1,__zero_reg__
 297 006a 1092 0000 		sts xNextFreeByte,__zero_reg__
 298 006e 0895      		ret
 300               	.Lscope3:
 302               		.stabd	78,0,0
 304               	.global	xPortGetFreeHeapSize
 306               	xPortGetFreeHeapSize:
 307               		.stabd	46,0,0
 137:../../Source/portable/MemMang/heap_1.c **** }
 138:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 139:../../Source/portable/MemMang/heap_1.c **** 
 140:../../Source/portable/MemMang/heap_1.c **** size_t xPortGetFreeHeapSize( void )
 141:../../Source/portable/MemMang/heap_1.c **** {
 309               	.LM14:
 310               	.LFBB4:
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 142:../../Source/portable/MemMang/heap_1.c **** 	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 316               	.LM15:
 317 0070 2091 0000 		lds r18,xNextFreeByte
 318 0074 3091 0000 		lds r19,xNextFreeByte+1
 143:../../Source/portable/MemMang/heap_1.c **** }
 320               	.LM16:
 321 0078 8BED      		ldi r24,lo8(-37)
 322 007a 95E0      		ldi r25,lo8(5)
 323 007c 821B      		sub r24,r18
 324 007e 930B      		sbc r25,r19
 325 0080 0895      		ret
 327               	.Lscope4:
 329               		.stabd	78,0,0
 330               		.local	pucAlignedHeap.2101
 331               		.comm	pucAlignedHeap.2101,2,1
 332               		.local	xNextFreeByte
 333               		.comm	xNextFreeByte,2,1
 334               		.local	ucHeap
 335               		.comm	ucHeap,1500,1
 339               	.Letext0:
 340               		.ident	"GCC: (GNU) 5.4.0"
 341               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_1.c
     /tmp/cc1HMMEg.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1HMMEg.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1HMMEg.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1HMMEg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1HMMEg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1HMMEg.s:185    .text:0000000000000000 pvPortMalloc
                             .bss:0000000000000000 pucAlignedHeap.2101
     /tmp/cc1HMMEg.s:333    .bss:0000000000000004 ucHeap
     /tmp/cc1HMMEg.s:331    .bss:0000000000000002 xNextFreeByte
     /tmp/cc1HMMEg.s:268    .text:0000000000000064 vPortFree
     /tmp/cc1HMMEg.s:285    .text:0000000000000066 vPortInitialiseBlocks
     /tmp/cc1HMMEg.s:306    .text:0000000000000070 xPortGetFreeHeapSize

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss
