   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 203               	vErrorChecks:
 204               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  * FreeRTOS Kernel V10.3.1
   3:main.c        ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:main.c        ****  *
   5:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:main.c        ****  * this software and associated documentation files (the "Software"), to deal in
   7:main.c        ****  * the Software without restriction, including without limitation the rights to
   8:main.c        ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:main.c        ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:main.c        ****  * subject to the following conditions:
  11:main.c        ****  *
  12:main.c        ****  * The above copyright notice and this permission notice shall be included in all
  13:main.c        ****  * copies or substantial portions of the Software.
  14:main.c        ****  *
  15:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:main.c        ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:main.c        ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:main.c        ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:main.c        ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:main.c        ****  *
  22:main.c        ****  * http://www.FreeRTOS.org
  23:main.c        ****  * http://aws.amazon.com/freertos
  24:main.c        ****  *
  25:main.c        ****  * 1 tab == 4 spaces!
  26:main.c        ****  */
  27:main.c        **** 
  28:main.c        **** /*
  29:main.c        ****  * Creates all the demo application tasks, then starts the scheduler.  The WEB
  30:main.c        ****  * documentation provides more details of the demo application tasks.
  31:main.c        ****  *
  32:main.c        ****  * Main. c also creates a task called "Check".  This only executes every three
  33:main.c        ****  * seconds but has the highest priority so is guaranteed to get processor time.
  34:main.c        ****  * Its main function is to check that all the other tasks are still operational.
  35:main.c        ****  * Each task that does not flash an LED maintains a unique count that is
  36:main.c        ****  * incremented each time the task successfully completes its function.  Should
  37:main.c        ****  * any error occur within such a task the count is permanently halted.  The
  38:main.c        ****  * check task inspects the count of each task to ensure it has changed since
  39:main.c        ****  * the last time the check task executed.  If all the count variables have
  40:main.c        ****  * changed all the tasks are still executing error free, and the check task
  41:main.c        ****  * toggles an LED.  Should any task contain an error at any time the LED toggle
  42:main.c        ****  * will stop.
  43:main.c        ****  *
  44:main.c        ****  * The LED flash and communications test tasks do not maintain a count.
  45:main.c        ****  */
  46:main.c        **** 
  47:main.c        **** /*
  48:main.c        **** Changes from V1.2.0
  49:main.c        **** 
  50:main.c        **** 	+ Changed the baud rate for the serial test from 19200 to 57600.
  51:main.c        **** 
  52:main.c        **** Changes from V1.2.3
  53:main.c        **** 
  54:main.c        **** 	+ The integer and comtest tasks are now used when the cooperative scheduler
  55:main.c        **** 	  is being used.  Previously they were only used with the preemptive
  56:main.c        **** 	  scheduler.
  57:main.c        **** 
  58:main.c        **** Changes from V1.2.5
  59:main.c        **** 
  60:main.c        **** 	+ Set the baud rate to 38400.  This has a smaller error percentage with an
  61:main.c        **** 	  8MHz clock (according to the manual).
  62:main.c        **** 
  63:main.c        **** Changes from V2.0.0
  64:main.c        **** 
  65:main.c        **** 	+ Delay periods are now specified using variables and constants of
  66:main.c        **** 	  TickType_t rather than unsigned long.
  67:main.c        **** 
  68:main.c        **** Changes from V2.6.1
  69:main.c        **** 
  70:main.c        **** 	+ The IAR and WinAVR AVR ports are now maintained separately.
  71:main.c        **** 
  72:main.c        **** Changes from V4.0.5
  73:main.c        **** 
  74:main.c        **** 	+ Modified to demonstrate the use of co-routines.
  75:main.c        **** 
  76:main.c        **** */
  77:main.c        **** 
  78:main.c        **** #include <stdlib.h>
  79:main.c        **** #include <string.h>
  80:main.c        **** 
  81:main.c        **** #ifdef GCC_MEGA_AVR
  82:main.c        **** 	/* EEPROM routines used only with the WinAVR compiler. */
  83:main.c        **** 	#include <avr/eeprom.h>
  84:main.c        **** #endif
  85:main.c        **** 
  86:main.c        **** /* Scheduler include files. */
  87:main.c        **** #include "FreeRTOS.h"
  88:main.c        **** #include "task.h"
  89:main.c        **** #include "croutine.h"
  90:main.c        **** 
  91:main.c        **** /* Demo file headers. */
  92:main.c        **** #include "PollQ.h"
  93:main.c        **** #include "integer.h"
  94:main.c        **** #include "serial.h"
  95:main.c        **** #include "comtest.h"
  96:main.c        **** #include "crflash.h"
  97:main.c        **** #include "print.h"
  98:main.c        **** #include "partest.h"
  99:main.c        **** #include "regtest.h"
 100:main.c        **** 
 101:main.c        **** /* Priority definitions for most of the tasks in the demo application.  Some
 102:main.c        **** tasks just use the idle priority. */
 103:main.c        **** #define mainLED_TASK_PRIORITY			( tskIDLE_PRIORITY + 1 )
 104:main.c        **** #define mainCOM_TEST_PRIORITY			( tskIDLE_PRIORITY + 2 )
 105:main.c        **** #define mainQUEUE_POLL_PRIORITY			( tskIDLE_PRIORITY + 2 )
 106:main.c        **** #define mainCHECK_TASK_PRIORITY			( tskIDLE_PRIORITY + 3 )
 107:main.c        **** 
 108:main.c        **** /* Baud rate used by the serial port tasks. */
 109:main.c        **** #define mainCOM_TEST_BAUD_RATE			( ( unsigned long ) 9600 )
 110:main.c        **** 
 111:main.c        **** /* LED used by the serial port tasks.  This is toggled on each character Tx,
 112:main.c        **** and mainCOM_TEST_LED + 1 is toggles on each character Rx. */
 113:main.c        **** #define mainCOM_TEST_LED				( 4 )
 114:main.c        **** 
 115:main.c        **** //////////////////////////////////////
 116:main.c        **** /* LED that is toggled by the check task.  The check task periodically checks
 117:main.c        **** that all the other tasks are operating without error.  If no errors are found
 118:main.c        **** the LED is toggled.  If an error is found at any time the LED is never toggles
 119:main.c        **** again. 
 120:main.c        **** #define mainCHECK_TASK_LED				( 7 )
 121:main.c        **** */
 122:main.c        **** //////////////////////////////////////
 123:main.c        **** 
 124:main.c        **** /* The period between executions of the check task. */
 125:main.c        **** #define mainCHECK_PERIOD				( ( TickType_t ) 3000 / portTICK_PERIOD_MS  )
 126:main.c        **** 
 127:main.c        **** /* An address in the EEPROM used to count resets.  This is used to check that
 128:main.c        **** the demo application is not unexpectedly resetting. */
 129:main.c        **** #define mainRESET_COUNT_ADDRESS			( ( void * ) 0x50 )
 130:main.c        **** 
 131:main.c        **** /* The number of coroutines to create. */
 132:main.c        **** #define mainNUM_FLASH_COROUTINES		( 3 )
 133:main.c        **** 
 134:main.c        **** /*
 135:main.c        ****  * The task function for the "Check" task.
 136:main.c        ****  */
 137:main.c        **** static void vErrorChecks( void *pvParameters );
 138:main.c        **** 
 139:main.c        **** /*
 140:main.c        ****  * Checks the unique counts of other tasks to ensure they are still operational.
 141:main.c        ****  * Flashes an LED if everything is okay.
 142:main.c        ****  */
 143:main.c        **** static void prvCheckOtherTasksAreStillRunning( void );
 144:main.c        **** 
 145:main.c        **** /*
 146:main.c        ****  * Called on boot to increment a count stored in the EEPROM.  This is used to
 147:main.c        ****  * ensure the CPU does not reset unexpectedly.
 148:main.c        ****  */
 149:main.c        **** static void prvIncrementResetCount( void );
 150:main.c        **** 
 151:main.c        **** /*
 152:main.c        ****  * The idle hook is used to scheduler co-routines.
 153:main.c        ****  */
 154:main.c        **** void vApplicationIdleHook( void );
 155:main.c        **** 
 156:main.c        **** /*-----------------------------------------------------------*/
 157:main.c        **** 
 158:main.c        **** short main( void )
 159:main.c        **** {
 160:main.c        **** 	prvIncrementResetCount();
 161:main.c        **** 
 162:main.c        **** 	/* Setup the LED's for output. */
 163:main.c        **** 	vParTestInitialise();
 164:main.c        **** 
 165:main.c        **** 	/* Create the standard demo tasks. */
 166:main.c        **** 	vStartIntegerMathTasks( tskIDLE_PRIORITY );
 167:main.c        **** 	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
 168:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 169:main.c        **** 	vStartRegTestTasks();
 170:main.c        **** 
 171:main.c        **** 	/* Create the tasks defined within this file. */
 172:main.c        **** 	xTaskCreate( vErrorChecks, "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL 
 173:main.c        **** 
 174:main.c        **** 	/* Create the co-routines that flash the LED's. */
 175:main.c        **** 	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
 176:main.c        **** 
 177:main.c        **** 	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
 178:main.c        **** 	as 1 in portmacro.h.  To use the cooperative scheduler define
 179:main.c        **** 	configUSE_PREEMPTION as 0. */
 180:main.c        **** 	vTaskStartScheduler();
 181:main.c        **** 
 182:main.c        **** 	return 0;
 183:main.c        **** }
 184:main.c        **** /*-----------------------------------------------------------*/
 185:main.c        **** 
 186:main.c        **** static void vErrorChecks( void *pvParameters )
 187:main.c        **** {
 206               	.LM0:
 207               	.LFBB1:
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212               	.LBB4:
 213               	.LBB5:
 188:main.c        **** static volatile unsigned long ulDummyVariable = 3UL;
 189:main.c        **** 
 190:main.c        **** 	/* The parameters are not used. */
 191:main.c        **** 	( void ) pvParameters;
 192:main.c        **** 
 193:main.c        **** 	/* Cycle for ever, delaying then checking all the other tasks are still
 194:main.c        **** 	operating without error. */
 195:main.c        **** 	for( ;; )
 196:main.c        **** 	{
 197:main.c        **** 		vTaskDelay( mainCHECK_PERIOD );
 198:main.c        **** 
 199:main.c        **** 		/* Perform a bit of 32bit maths to ensure the registers used by the
 200:main.c        **** 		integer tasks get some exercise. The result here is not important -
 201:main.c        **** 		see the demo application documentation for more info. */
 202:main.c        **** 		ulDummyVariable *= 3;
 203:main.c        **** 
 204:main.c        **** 		prvCheckOtherTasksAreStillRunning();
 205:main.c        **** 	}
 206:main.c        **** }
 207:main.c        **** /*-----------------------------------------------------------*/
 208:main.c        **** 
 209:main.c        **** static void prvCheckOtherTasksAreStillRunning( void )
 210:main.c        **** {
 211:main.c        **** static portBASE_TYPE xErrorHasOccurred = pdFALSE;
 212:main.c        **** 
 213:main.c        **** 	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 214:main.c        **** 	{
 215:main.c        **** 		xErrorHasOccurred = pdTRUE;
 215               	.LM1:
 216 0000 C1E0      		ldi r28,lo8(1)
 217               	.L6:
 218               	.LBE5:
 219               	.LBE4:
 197:main.c        **** 
 221               	.LM2:
 222 0002 88EB      		ldi r24,lo8(-72)
 223 0004 9BE0      		ldi r25,lo8(11)
 224 0006 0E94 0000 		call vTaskDelay
 202:main.c        **** 
 226               	.LM3:
 227 000a 2091 0000 		lds r18,ulDummyVariable.2422
 228 000e 3091 0000 		lds r19,ulDummyVariable.2422+1
 229 0012 4091 0000 		lds r20,ulDummyVariable.2422+2
 230 0016 5091 0000 		lds r21,ulDummyVariable.2422+3
 231 001a A3E0      		ldi r26,lo8(3)
 232 001c B0E0      		ldi r27,0
 233 001e 0E94 0000 		call __muluhisi3
 234 0022 6093 0000 		sts ulDummyVariable.2422,r22
 235 0026 7093 0000 		sts ulDummyVariable.2422+1,r23
 236 002a 8093 0000 		sts ulDummyVariable.2422+2,r24
 237 002e 9093 0000 		sts ulDummyVariable.2422+3,r25
 238               	.LBB7:
 239               	.LBB6:
 213:main.c        **** 	{
 241               	.LM4:
 242 0032 0E94 0000 		call xAreIntegerMathsTaskStillRunning
 243 0036 8130      		cpi r24,lo8(1)
 244 0038 01F0      		breq .L2
 246               	.LM5:
 247 003a C093 0000 		sts xErrorHasOccurred.2427,r28
 248               	.L2:
 216:main.c        **** 	}
 217:main.c        **** 
 218:main.c        **** 	if( xAreComTestTasksStillRunning() != pdTRUE )
 250               	.LM6:
 251 003e 0E94 0000 		call xAreComTestTasksStillRunning
 252 0042 8130      		cpi r24,lo8(1)
 253 0044 01F0      		breq .L3
 219:main.c        **** 	{
 220:main.c        **** 		xErrorHasOccurred = pdTRUE;
 255               	.LM7:
 256 0046 C093 0000 		sts xErrorHasOccurred.2427,r28
 257               	.L3:
 221:main.c        **** 	}
 222:main.c        **** 
 223:main.c        **** 	if( xArePollingQueuesStillRunning() != pdTRUE )
 259               	.LM8:
 260 004a 0E94 0000 		call xArePollingQueuesStillRunning
 261 004e 8130      		cpi r24,lo8(1)
 262 0050 01F0      		breq .L4
 224:main.c        **** 	{
 225:main.c        **** 		xErrorHasOccurred = pdTRUE;
 264               	.LM9:
 265 0052 C093 0000 		sts xErrorHasOccurred.2427,r28
 266               	.L4:
 226:main.c        **** 	}
 227:main.c        **** 
 228:main.c        **** 	if( xAreRegTestTasksStillRunning() != pdTRUE )
 268               	.LM10:
 269 0056 0E94 0000 		call xAreRegTestTasksStillRunning
 270 005a 8130      		cpi r24,lo8(1)
 271 005c 01F0      		breq .L5
 229:main.c        **** 	{
 230:main.c        **** 		xErrorHasOccurred = pdTRUE;
 273               	.LM11:
 274 005e C093 0000 		sts xErrorHasOccurred.2427,r28
 275               	.L5:
 231:main.c        **** 	}
 232:main.c        **** 
 233:main.c        **** 	if( xErrorHasOccurred == pdFALSE )
 277               	.LM12:
 278 0062 8091 0000 		lds r24,xErrorHasOccurred.2427
 279 0066 8111      		cpse r24,__zero_reg__
 280 0068 00C0      		rjmp .L6
 234:main.c        **** 	{
 235:main.c        **** 		/* Toggle the LED if everything is okay so we know if an error occurs even if not
 236:main.c        **** 		using console IO. */
 237:main.c        **** 		vParTestToggleLED(/* mainCHECK_TASK_LED */);
 282               	.LM13:
 283 006a 0E94 0000 		call vParTestToggleLED
 284 006e 00C0      		rjmp .L6
 285               	.LBE6:
 286               	.LBE7:
 291               	.Lscope1:
 293               		.stabd	78,0,0
 294               		.section	.rodata.str1.1,"aMS",@progbits,1
 295               	.LC0:
 296 0000 4368 6563 		.string	"Check"
 296      6B00 
 297               		.section	.text.startup,"ax",@progbits
 299               	.global	main
 301               	main:
 302               		.stabd	46,0,0
 159:main.c        **** 	prvIncrementResetCount();
 304               	.LM14:
 305               	.LFBB2:
 306 0000 EF92      		push r14
 307 0002 FF92      		push r15
 308 0004 0F93      		push r16
 309 0006 CF93      		push r28
 310 0008 DF93      		push r29
 311 000a 1F92      		push __zero_reg__
 312 000c CDB7      		in r28,__SP_L__
 313 000e DEB7      		in r29,__SP_H__
 314               	/* prologue: function */
 315               	/* frame size = 1 */
 316               	/* stack size = 6 */
 317               	.L__stack_usage = 6
 318               	.LBB10:
 319               	.LBB11:
 238:main.c        **** 	}
 239:main.c        **** }
 240:main.c        **** /*-----------------------------------------------------------*/
 241:main.c        **** 
 242:main.c        **** static void prvIncrementResetCount( void )
 243:main.c        **** {
 244:main.c        **** unsigned char ucCount;
 245:main.c        **** 
 246:main.c        **** 	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
 321               	.LM15:
 322 0010 41E0      		ldi r20,lo8(1)
 323 0012 50E0      		ldi r21,0
 324 0014 60E5      		ldi r22,lo8(80)
 325 0016 70E0      		ldi r23,0
 326 0018 CE01      		movw r24,r28
 327 001a 0196      		adiw r24,1
 328 001c 0E94 0000 		call eeprom_read_block
 247:main.c        **** 	ucCount++;
 330               	.LM16:
 331 0020 6981      		ldd r22,Y+1
 332 0022 6F5F      		subi r22,lo8(-(1))
 333 0024 6983      		std Y+1,r22
 248:main.c        **** 	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
 335               	.LM17:
 336 0026 80E5      		ldi r24,lo8(80)
 337 0028 90E0      		ldi r25,0
 338 002a 0E94 0000 		call eeprom_write_byte
 339               	.LBE11:
 340               	.LBE10:
 163:main.c        **** 
 342               	.LM18:
 343 002e 0E94 0000 		call vParTestInitialise
 166:main.c        **** 	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
 345               	.LM19:
 346 0032 80E0      		ldi r24,0
 347 0034 0E94 0000 		call vStartIntegerMathTasks
 167:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 349               	.LM20:
 350 0038 24E0      		ldi r18,lo8(4)
 351 003a 40E8      		ldi r20,lo8(-128)
 352 003c 55E2      		ldi r21,lo8(37)
 353 003e 60E0      		ldi r22,0
 354 0040 70E0      		ldi r23,0
 355 0042 82E0      		ldi r24,lo8(2)
 356 0044 0E94 0000 		call vAltStartComTestTasks
 168:main.c        **** 	vStartRegTestTasks();
 358               	.LM21:
 359 0048 82E0      		ldi r24,lo8(2)
 360 004a 0E94 0000 		call vStartPolledQueueTasks
 169:main.c        **** 
 362               	.LM22:
 363 004e 0E94 0000 		call vStartRegTestTasks
 172:main.c        **** 
 365               	.LM23:
 366 0052 E12C      		mov r14,__zero_reg__
 367 0054 F12C      		mov r15,__zero_reg__
 368 0056 03E0      		ldi r16,lo8(3)
 369 0058 20E0      		ldi r18,0
 370 005a 30E0      		ldi r19,0
 371 005c 45E5      		ldi r20,lo8(85)
 372 005e 50E0      		ldi r21,0
 373 0060 60E0      		ldi r22,lo8(.LC0)
 374 0062 70E0      		ldi r23,hi8(.LC0)
 375 0064 80E0      		ldi r24,lo8(gs(vErrorChecks))
 376 0066 90E0      		ldi r25,hi8(gs(vErrorChecks))
 377 0068 0E94 0000 		call xTaskCreate
 175:main.c        **** 
 379               	.LM24:
 380 006c 83E0      		ldi r24,lo8(3)
 381 006e 0E94 0000 		call vStartFlashCoRoutines
 180:main.c        **** 
 383               	.LM25:
 384 0072 0E94 0000 		call vTaskStartScheduler
 183:main.c        **** /*-----------------------------------------------------------*/
 386               	.LM26:
 387 0076 80E0      		ldi r24,0
 388 0078 90E0      		ldi r25,0
 389               	/* epilogue start */
 390 007a 0F90      		pop __tmp_reg__
 391 007c DF91      		pop r29
 392 007e CF91      		pop r28
 393 0080 0F91      		pop r16
 394 0082 FF90      		pop r15
 395 0084 EF90      		pop r14
 396 0086 0895      		ret
 401               	.Lscope2:
 403               		.stabd	78,0,0
 404               		.text
 406               	.global	vApplicationIdleHook
 408               	vApplicationIdleHook:
 409               		.stabd	46,0,0
 249:main.c        **** }
 250:main.c        **** /*-----------------------------------------------------------*/
 251:main.c        **** 
 252:main.c        **** void vApplicationIdleHook( void )
 253:main.c        **** {
 411               	.LM27:
 412               	.LFBB3:
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
 254:main.c        **** 	vCoRoutineSchedule();
 418               	.LM28:
 419 0070 0C94 0000 		jmp vCoRoutineSchedule
 421               	.Lscope3:
 423               		.stabd	78,0,0
 424               		.local	xErrorHasOccurred.2427
 425               		.comm	xErrorHasOccurred.2427,1,1
 426               		.data
 429               	ulDummyVariable.2422:
 430 0000 03        		.byte	3
 431 0001 00        		.byte	0
 432 0002 00        		.byte	0
 433 0003 00        		.byte	0
 434               		.text
 436               	.Letext0:
 437               		.ident	"GCC: (GNU) 5.4.0"
 438               	.global __do_copy_data
 439               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccbuhVsf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbuhVsf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbuhVsf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbuhVsf.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbuhVsf.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccbuhVsf.s:203    .text:0000000000000000 vErrorChecks
     /tmp/ccbuhVsf.s:429    .data:0000000000000000 ulDummyVariable.2422
                             .bss:0000000000000000 xErrorHasOccurred.2427
     /tmp/ccbuhVsf.s:301    .text.startup:0000000000000000 main
     /tmp/ccbuhVsf.s:408    .text:0000000000000070 vApplicationIdleHook

UNDEFINED SYMBOLS
vTaskDelay
__muluhisi3
xAreIntegerMathsTaskStillRunning
xAreComTestTasksStillRunning
xArePollingQueuesStillRunning
xAreRegTestTasksStillRunning
vParTestToggleLED
eeprom_read_block
eeprom_write_byte
vParTestInitialise
vStartIntegerMathTasks
vAltStartComTestTasks
vStartPolledQueueTasks
vStartRegTestTasks
xTaskCreate
vStartFlashCoRoutines
vTaskStartScheduler
vCoRoutineSchedule
__do_copy_data
__do_clear_bss
