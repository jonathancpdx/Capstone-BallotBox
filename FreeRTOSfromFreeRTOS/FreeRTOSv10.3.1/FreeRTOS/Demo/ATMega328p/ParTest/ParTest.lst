   1               		.file	"ParTest.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 175               	.global	vParTestInitialise
 177               	vParTestInitialise:
 178               		.stabd	46,0,0
   1:ParTest/ParTest.c **** /*
   2:ParTest/ParTest.c ****  * FreeRTOS Kernel V10.3.1
   3:ParTest/ParTest.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ParTest/ParTest.c ****  *
   5:ParTest/ParTest.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:ParTest/ParTest.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:ParTest/ParTest.c ****  * the Software without restriction, including without limitation the rights to
   8:ParTest/ParTest.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:ParTest/ParTest.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:ParTest/ParTest.c ****  * subject to the following conditions:
  11:ParTest/ParTest.c ****  *
  12:ParTest/ParTest.c ****  * The above copyright notice and this permission notice shall be included in all
  13:ParTest/ParTest.c ****  * copies or substantial portions of the Software.
  14:ParTest/ParTest.c ****  *
  15:ParTest/ParTest.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:ParTest/ParTest.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:ParTest/ParTest.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:ParTest/ParTest.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:ParTest/ParTest.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:ParTest/ParTest.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:ParTest/ParTest.c ****  *
  22:ParTest/ParTest.c ****  * http://www.FreeRTOS.org
  23:ParTest/ParTest.c ****  * http://aws.amazon.com/freertos
  24:ParTest/ParTest.c ****  *
  25:ParTest/ParTest.c ****  * 1 tab == 4 spaces!
  26:ParTest/ParTest.c ****  */
  27:ParTest/ParTest.c **** 
  28:ParTest/ParTest.c **** /* 
  29:ParTest/ParTest.c **** Changes from V2.0.0
  30:ParTest/ParTest.c **** 	+ Use scheduler suspends in place of critical sections.
  31:ParTest/ParTest.c **** Changes from V2.6.0
  32:ParTest/ParTest.c **** 	+ Replaced the inb() and outb() functions with direct memory
  33:ParTest/ParTest.c **** 	  access.  This allows the port to be built with the 20050414 build of
  34:ParTest/ParTest.c **** 	  WinAVR.
  35:ParTest/ParTest.c **** */
  36:ParTest/ParTest.c **** 
  37:ParTest/ParTest.c **** #ifndef F_CPU
  38:ParTest/ParTest.c **** #define F_CPU 16000000UL
  39:ParTest/ParTest.c **** #endif
  40:ParTest/ParTest.c **** 
  41:ParTest/ParTest.c **** #include "FreeRTOS.h"
  42:ParTest/ParTest.c **** #include "task.h"
  43:ParTest/ParTest.c **** #include "partest.h"
  44:ParTest/ParTest.c **** #include <util/delay.h>
  45:ParTest/ParTest.c **** 
  46:ParTest/ParTest.c **** /*-----------------------------------------------------------
  47:ParTest/ParTest.c ****  * Simple parallel port IO routines.
  48:ParTest/ParTest.c ****  *-----------------------------------------------------------*/
  49:ParTest/ParTest.c **** 
  50:ParTest/ParTest.c **** #define partstALL_BITS_OUTPUT			( ( unsigned char ) 0xff )
  51:ParTest/ParTest.c **** #define partstALL_OUTPUTS_OFF			( ( unsigned char ) 0xff )
  52:ParTest/ParTest.c **** #define partstMAX_OUTPUT_LED			( ( unsigned char ) 1 )
  53:ParTest/ParTest.c **** 
  54:ParTest/ParTest.c **** static volatile unsigned char ucCurrentOutputValue = partstALL_OUTPUTS_OFF; /*lint !e956 File scope
  55:ParTest/ParTest.c **** 
  56:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
  57:ParTest/ParTest.c **** 
  58:ParTest/ParTest.c **** void vParTestInitialise( void )
  59:ParTest/ParTest.c **** {
 180               	.LM0:
 181               	.LFBB1:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
  60:ParTest/ParTest.c **** 	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
 187               	.LM1:
 188 0000 8FEF      		ldi r24,lo8(-1)
 189 0002 8093 0000 		sts ucCurrentOutputValue,r24
  61:ParTest/ParTest.c **** 
  62:ParTest/ParTest.c **** 	/* Set port B direction to outputs.  Start with all output off. */
  63:ParTest/ParTest.c **** 	DDRB = partstALL_BITS_OUTPUT;
 191               	.LM2:
 192 0006 84B9      		out 0x4,r24
  64:ParTest/ParTest.c **** 	//PORTB = ucCurrentOutputValue;
  65:ParTest/ParTest.c **** 	        vTaskSuspendAll();
 194               	.LM3:
 195 0008 0E94 0000 		call vTaskSuspendAll
  66:ParTest/ParTest.c ****         {
  67:ParTest/ParTest.c ****                 for (;;)
  68:ParTest/ParTest.c ****                 {
  69:ParTest/ParTest.c ****                         PORTB = 0b00100000;
 197               	.LM4:
 198 000c 80E2      		ldi r24,lo8(32)
 199               	.L2:
 201               	.LM5:
 202 000e 85B9      		out 0x5,r24
 203               	.LBB10:
 204               	.LBB11:
 206               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 208               	.LM6:
 209 0010 2FEF      		ldi r18,lo8(6399999)
 210 0012 37EA      		ldi r19,hi8(6399999)
 211 0014 91E6      		ldi r25,hlo8(6399999)
 212 0016 2150      	1:	subi r18,1
 213 0018 3040      		sbci r19,0
 214 001a 9040      		sbci r25,0
 215 001c 01F4      		brne 1b
 216 001e 00C0      		rjmp .
 217 0020 0000      		nop
 218               	.LBE11:
 219               	.LBE10:
 221               	.Ltext2:
  70:ParTest/ParTest.c ****                         _delay_ms(2000);
  71:ParTest/ParTest.c ****                         PORTB = 0b00000000;
 223               	.LM7:
 224 0022 15B8      		out 0x5,__zero_reg__
 225               	.LBB12:
 226               	.LBB13:
 228               	.Ltext3:
 230               	.LM8:
 231 0024 2FEF      		ldi r18,lo8(6399999)
 232 0026 37EA      		ldi r19,hi8(6399999)
 233 0028 91E6      		ldi r25,hlo8(6399999)
 234 002a 2150      	1:	subi r18,1
 235 002c 3040      		sbci r19,0
 236 002e 9040      		sbci r25,0
 237 0030 01F4      		brne 1b
 238 0032 00C0      		rjmp .
 239 0034 0000      		nop
 240 0036 00C0      		rjmp .L2
 241               	.LBE13:
 242               	.LBE12:
 244               	.Lscope1:
 246               		.stabd	78,0,0
 250               	.global	vParTestSetLED
 252               	vParTestSetLED:
 253               		.stabd	46,0,0
 255               	.Ltext4:
  72:ParTest/ParTest.c ****                         _delay_ms(2000);
  73:ParTest/ParTest.c **** 
  74:ParTest/ParTest.c ****                 }
  75:ParTest/ParTest.c ****         }
  76:ParTest/ParTest.c ****         xTaskResumeAll();
  77:ParTest/ParTest.c **** 
  78:ParTest/ParTest.c **** }
  79:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
  80:ParTest/ParTest.c **** 
  81:ParTest/ParTest.c **** void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
  82:ParTest/ParTest.c **** {
 257               	.LM9:
 258               	.LFBB2:
 259 0038 1F93      		push r17
 260 003a CF93      		push r28
 261 003c DF93      		push r29
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 3 */
 265               	.L__stack_usage = 3
  83:ParTest/ParTest.c **** unsigned char ucBit = ( unsigned char ) 1;
  84:ParTest/ParTest.c **** 
  85:ParTest/ParTest.c **** 	if( uxLED <= partstMAX_OUTPUT_LED )
 267               	.LM10:
 268 003e 8230      		cpi r24,lo8(2)
 269 0040 00F4      		brsh .L4
 270 0042 162F      		mov r17,r22
  86:ParTest/ParTest.c **** 	{
  87:ParTest/ParTest.c **** 		ucBit <<= uxLED;	
 272               	.LM11:
 273 0044 C1E0      		ldi r28,lo8(1)
 274 0046 D0E0      		ldi r29,0
 275 0048 00C0      		rjmp 2f
 276               		1:
 277 004a CC0F      		lsl r28
 278               		2:
 279 004c 8A95      		dec r24
 280 004e 02F4      		brpl 1b
  88:ParTest/ParTest.c **** 
  89:ParTest/ParTest.c **** 		vTaskSuspendAll();
 282               	.LM12:
 283 0050 0E94 0000 		call vTaskSuspendAll
  90:ParTest/ParTest.c **** 		{
  91:ParTest/ParTest.c **** 			if( xValue == pdTRUE )
  92:ParTest/ParTest.c **** 			{
  93:ParTest/ParTest.c **** 				ucBit ^= ( unsigned char ) 0xff;
  94:ParTest/ParTest.c **** 				ucCurrentOutputValue &= ucBit;
 285               	.LM13:
 286 0054 8091 0000 		lds r24,ucCurrentOutputValue
  91:ParTest/ParTest.c **** 			{
 288               	.LM14:
 289 0058 1130      		cpi r17,lo8(1)
 290 005a 01F4      		brne .L6
 292               	.LM15:
 293 005c C095      		com r28
 294 005e C823      		and r28,r24
 295 0060 00C0      		rjmp .L8
 296               	.L6:
  95:ParTest/ParTest.c **** 			}
  96:ParTest/ParTest.c **** 			else
  97:ParTest/ParTest.c **** 			{
  98:ParTest/ParTest.c **** 				ucCurrentOutputValue |= ucBit;
 298               	.LM16:
 299 0062 C82B      		or r28,r24
 300               	.L8:
 301 0064 C093 0000 		sts ucCurrentOutputValue,r28
  99:ParTest/ParTest.c **** 			}
 100:ParTest/ParTest.c **** 
 101:ParTest/ParTest.c **** 			PORTB = ucCurrentOutputValue;
 303               	.LM17:
 304 0068 8091 0000 		lds r24,ucCurrentOutputValue
 305 006c 85B9      		out 0x5,r24
 306               	/* epilogue start */
 102:ParTest/ParTest.c **** 		}
 103:ParTest/ParTest.c **** 		xTaskResumeAll();
 104:ParTest/ParTest.c **** 	}
 105:ParTest/ParTest.c **** }
 308               	.LM18:
 309 006e DF91      		pop r29
 310 0070 CF91      		pop r28
 311 0072 1F91      		pop r17
 103:ParTest/ParTest.c **** 	}
 313               	.LM19:
 314 0074 0C94 0000 		jmp xTaskResumeAll
 315               	.L4:
 316               	/* epilogue start */
 318               	.LM20:
 319 0078 DF91      		pop r29
 320 007a CF91      		pop r28
 321 007c 1F91      		pop r17
 322 007e 0895      		ret
 324               	.Lscope2:
 326               		.stabd	78,0,0
 328               	.global	vParTestToggleLED
 330               	vParTestToggleLED:
 331               		.stabd	46,0,0
 106:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
 107:ParTest/ParTest.c **** void vParTestToggleLED()
 108:ParTest/ParTest.c **** {
 333               	.LM21:
 334               	.LFBB3:
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 109:ParTest/ParTest.c **** 	vTaskSuspendAll();
 340               	.LM22:
 341 0080 0E94 0000 		call vTaskSuspendAll
 110:ParTest/ParTest.c **** 	{
 111:ParTest/ParTest.c **** 		for (;;)
 112:ParTest/ParTest.c **** 		{
 113:ParTest/ParTest.c **** 			PORTB = 0b00100000;
 343               	.LM23:
 344 0084 80E2      		ldi r24,lo8(32)
 345               	.L10:
 347               	.LM24:
 348 0086 85B9      		out 0x5,r24
 349               	.LBB14:
 350               	.LBB15:
 352               	.Ltext5:
 354               	.LM25:
 355 0088 2FEF      		ldi r18,lo8(1599999)
 356 008a 39E6      		ldi r19,hi8(1599999)
 357 008c 98E1      		ldi r25,hlo8(1599999)
 358 008e 2150      	1:	subi r18,1
 359 0090 3040      		sbci r19,0
 360 0092 9040      		sbci r25,0
 361 0094 01F4      		brne 1b
 362 0096 00C0      		rjmp .
 363 0098 0000      		nop
 364               	.LBE15:
 365               	.LBE14:
 367               	.Ltext6:
 114:ParTest/ParTest.c **** 			_delay_ms(500);
 115:ParTest/ParTest.c **** 			PORTB = 0b00000000;
 369               	.LM26:
 370 009a 15B8      		out 0x5,__zero_reg__
 371               	.LBB16:
 372               	.LBB17:
 374               	.Ltext7:
 376               	.LM27:
 377 009c 2FEF      		ldi r18,lo8(1599999)
 378 009e 39E6      		ldi r19,hi8(1599999)
 379 00a0 98E1      		ldi r25,hlo8(1599999)
 380 00a2 2150      	1:	subi r18,1
 381 00a4 3040      		sbci r19,0
 382 00a6 9040      		sbci r25,0
 383 00a8 01F4      		brne 1b
 384 00aa 00C0      		rjmp .
 385 00ac 0000      		nop
 386 00ae 00C0      		rjmp .L10
 387               	.LBE17:
 388               	.LBE16:
 390               	.Lscope3:
 392               		.stabd	78,0,0
 393               		.data
 396               	ucCurrentOutputValue:
 397 0000 FF        		.byte	-1
 399               		.text
 401               	.Letext0:
 402               		.ident	"GCC: (GNU) 5.4.0"
 403               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ParTest.c
     /tmp/ccdjs6CN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdjs6CN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdjs6CN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdjs6CN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdjs6CN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdjs6CN.s:177    .text:0000000000000000 vParTestInitialise
     /tmp/ccdjs6CN.s:396    .data:0000000000000000 ucCurrentOutputValue
     /tmp/ccdjs6CN.s:252    .text:0000000000000038 vParTestSetLED
     /tmp/ccdjs6CN.s:330    .text:0000000000000080 vParTestToggleLED

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_copy_data
